{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nastassianguyen/Desktop/proj/EagleTracker/src/cards.tsx\";\n\n/* \nfile: cards.tsx \n    file for the individual tracker pages\n    will need to implement csv or excel export here\n    will need to change the datatable component into an actual table \n        - currently is a listing of data\n*/\nimport React, { Component } from 'react';\nimport { DeviceApi, UserApi } from \"./lb-api\";\nimport { Configuration } from \"./lb-api/configuration\";\n// Table Creation\nimport { DataGrid } from '@material-ui/data-grid';\nimport { format } from 'date-fns'; // Excel \n\nimport ReactExport from \"react-export-excel\";\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\nvar deviceIDEX; //to have device name in excel sheet\n//variables for determining data points\n\nvar numberPulls = 50; // card function to display device name and datatable\n\nfunction card(device) {\n  // get the devices and points\n  const getDevicesAndPoints = async () => {\n    try {\n      const config = new Configuration();\n      const userApi = new UserApi(config);\n      const deviceApi = new DeviceApi(config);\n\n      try {\n        let token = await userApi.userLogin({\n          username: process.env.REACT_APP_LIGHTBUG_API_USERNAME,\n          password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD\n        });\n        config.accessToken = token.id;\n        config.userId = `${token.userId}`;\n      } catch {\n        console.error('Login Failed');\n        alert('Login Fail');\n        return;\n      }\n\n      let allDevices = await userApi.userPrototypeGetDevices(config.userId, JSON.stringify({\n        where: {\n          lastConnection: {\n            gt: +new Date() - 7 * 24 * 3600 * 1000\n          }\n        }\n      }));\n      let items = [];\n\n      for (const device of allDevices) {\n        if (!device.id) continue; // prevent error on next line\n\n        let points = await deviceApi.devicePrototypeGetPoints(device.id, JSON.stringify({\n          where: {\n            timestamp: {\n              between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]\n            },\n            locationType: {\n              neq: 'invalid'\n            }\n          },\n          order: 'timestamp DESC',\n          // order by newest points first\n          limit: numberPulls\n        })); // Where data gets individually sorted\n\n        deviceIDEX = device.name;\n        points.forEach(point => {\n          var _point$location, _point$location2;\n\n          // ---Bruteforce way, push all data points into a single 1-d array---\n          items.push(format(new Date(point.timestamp), 'Pp'));\n          items.push((_point$location = point.location) === null || _point$location === void 0 ? void 0 : _point$location.lat);\n          items.push((_point$location2 = point.location) === null || _point$location2 === void 0 ? void 0 : _point$location2.lng);\n          items.push(point.altitude);\n          items.push(point.batteryVoltage);\n        });\n      }\n\n      this.setState({\n        items\n      });\n    } catch (e) {\n      console.error(\"Failed to get data\", e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card fluid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: device.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section double-padded\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card fluid\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"battery life, other info\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-8\",\n            children: /*#__PURE__*/_jsxDEV(DataTable, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n} // DataTable Component \n\n\nexport class DataTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n    };\n  } // get the devices and points\n\n\n  async getDevicesAndPoints() {\n    try {\n      const config = new Configuration();\n      const userApi = new UserApi(config);\n      const deviceApi = new DeviceApi(config);\n\n      try {\n        let token = await userApi.userLogin({\n          username: process.env.REACT_APP_LIGHTBUG_API_USERNAME,\n          password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD\n        });\n        config.accessToken = token.id;\n        config.userId = `${token.userId}`;\n      } catch {\n        console.error('Login Failed');\n        alert('Login Fail');\n        return;\n      }\n\n      let allDevices = await userApi.userPrototypeGetDevices(config.userId, JSON.stringify({\n        where: {\n          lastConnection: {\n            gt: +new Date() - 7 * 24 * 3600 * 1000\n          }\n        }\n      }));\n      let items = [];\n\n      for (const device of allDevices) {\n        if (!device.id) continue; // prevent error on next line\n\n        let points = await deviceApi.devicePrototypeGetPoints(device.id, JSON.stringify({\n          where: {\n            timestamp: {\n              between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]\n            },\n            locationType: {\n              neq: 'invalid'\n            }\n          },\n          order: 'timestamp DESC',\n          // order by newest points first\n          limit: numberPulls\n        })); // Where data gets individually sorted\n\n        deviceIDEX = device.name;\n        points.forEach(point => {\n          var _point$location3, _point$location4;\n\n          // ---Bruteforce way, push all data points into a single 1-d array---\n          items.push(format(new Date(point.timestamp), 'Pp'));\n          items.push((_point$location3 = point.location) === null || _point$location3 === void 0 ? void 0 : _point$location3.lat);\n          items.push((_point$location4 = point.location) === null || _point$location4 === void 0 ? void 0 : _point$location4.lng);\n          items.push(point.altitude);\n          items.push(point.batteryVoltage);\n        });\n      }\n\n      this.setState({\n        items\n      });\n    } catch (e) {\n      console.error(\"Failed to get data\", e);\n    }\n  }\n\n  componentDidMount() {\n    this.getDevicesAndPoints().then();\n  }\n\n  render() {\n    //uniqueData needs to be equal to number of unique data points wanted\n    //e.g. if getting date,latitude and longatude then uniqueData = 3;\n    var uniqueData = 5;\n    let rows = [];\n    let idCount = 0;\n\n    for (var i = 0; i < numberPulls * uniqueData; i += uniqueData) {\n      //sets rows for table\n      rows.push({\n        id: idCount,\n        col1: this.state.items[i],\n        col2: this.state.items[i + 1],\n        col3: this.state.items[i + 2],\n        col4: this.state.items[i + 3],\n        col5: this.state.items[i + 4]\n      });\n      idCount++;\n    }\n\n    let columns = [//sets columns for table\n    {\n      field: 'col1',\n      headerName: 'Date',\n      width: 400\n    }, {\n      field: 'col2',\n      headerName: 'Latitude',\n      width: 200\n    }, {\n      field: 'col3',\n      headerName: 'Longitude',\n      width: 200\n    }, {\n      field: 'col4',\n      headerName: 'Altitude (Meters)',\n      width: 200,\n      hide: true\n    }, {\n      field: 'col5',\n      headerName: 'Voltage (Volts)',\n      width: 200,\n      hide: true\n    }];\n    return (\n      /*#__PURE__*/\n      //Putting Data into Table\n      _jsxDEV(\"div\", {\n        style: {\n          height: 800,\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(ExcelFile, {\n          element: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Download Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 33\n          }, this),\n          filename: \"Eagle Data\",\n          children: /*#__PURE__*/_jsxDEV(ExcelSheet, {\n            data: rows,\n            name: deviceIDEX,\n            children: [/*#__PURE__*/_jsxDEV(ExcelColumn, {\n              label: \"Date\",\n              value: \"col1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(ExcelColumn, {\n              label: \"Latitude\",\n              value: \"col2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(ExcelColumn, {\n              label: \"Longitude\",\n              value: \"col3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(ExcelColumn, {\n              label: \"Altitude(Meters)\",\n              value: \"col4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(ExcelColumn, {\n              label: \"Voltage(Volts\",\n              value: \"col5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: rows,\n          columns: columns\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }, this)\n    );\n  }\n\n}\nexport default card;","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/cards.tsx"],"names":["React","Component","DeviceApi","UserApi","Configuration","DataGrid","format","ReactExport","ExcelFile","ExcelSheet","ExcelColumn","deviceIDEX","numberPulls","card","device","getDevicesAndPoints","config","userApi","deviceApi","token","userLogin","username","process","env","REACT_APP_LIGHTBUG_API_USERNAME","password","REACT_APP_LIGHTBUG_API_PASSWORD","accessToken","id","userId","console","error","alert","allDevices","userPrototypeGetDevices","JSON","stringify","where","lastConnection","gt","Date","items","points","devicePrototypeGetPoints","timestamp","between","locationType","neq","order","limit","name","forEach","point","push","location","lat","lng","altitude","batteryVoltage","setState","e","DataTable","constructor","props","state","componentDidMount","then","render","uniqueData","rows","idCount","i","col1","col2","col3","col4","col5","columns","field","headerName","width","hide","height"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,SAAR,EAAmBC,OAAnB,QAAiC,UAAjC;AACA,SAAQC,aAAR,QAA4B,wBAA5B;AAGA;AACA,SAASC,QAAT,QAAmD,wBAAnD;AACA,SAASC,MAAT,QAAuB,UAAvB,C,CAGA;;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,MAAMC,SAAS,GAAGD,WAAW,CAACC,SAA9B;AACA,MAAMC,UAAU,GAAGF,WAAW,CAACC,SAAZ,CAAsBC,UAAzC;AACA,MAAMC,WAAW,GAAGH,WAAW,CAACC,SAAZ,CAAsBE,WAA1C;AACA,IAAIC,UAAJ,C,CAAgB;AAEhB;;AACA,IAAIC,WAAW,GAAG,EAAlB,C,CAEA;;AACA,SAASC,IAAT,CAAcC,MAAd,EAAsB;AAClB;AACA,QAAMC,mBAAmB,GAAG,YAAY;AACpC,QAAI;AACA,YAAMC,MAAM,GAAG,IAAIZ,aAAJ,EAAf;AACA,YAAMa,OAAO,GAAG,IAAId,OAAJ,CAAYa,MAAZ,CAAhB;AACA,YAAME,SAAS,GAAG,IAAIhB,SAAJ,CAAcc,MAAd,CAAlB;;AACA,UAAI;AACA,YAAIG,KAAK,GAAG,MAAMF,OAAO,CAACG,SAAR,CAAkB;AAACC,UAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,+BAAvB;AAAwDC,UAAAA,QAAQ,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAA9E,SAAlB,CAAlB;AACAV,QAAAA,MAAM,CAACW,WAAP,GAAqBR,KAAK,CAACS,EAA3B;AACAZ,QAAAA,MAAM,CAACa,MAAP,GAAiB,GAAEV,KAAK,CAACU,MAAO,EAAhC;AAEH,OALD,CAKE,MAAM;AACJC,QAAAA,OAAO,CAACC,KAAR,CAAc,cAAd;AACAC,QAAAA,KAAK,CAAC,YAAD,CAAL;AACA;AACH;;AAED,UAAIC,UAAU,GAAG,MAAMhB,OAAO,CAACiB,uBAAR,CAAgClB,MAAM,CAACa,MAAvC,EACnBM,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,KAAK,EAAE;AAACC,UAAAA,cAAc,EAAG;AAACC,YAAAA,EAAE,EAAE,CAAC,IAAIC,IAAJ,EAAD,GAAc,IAAI,EAAJ,GAAS,IAAT,GAAgB;AAAnC;AAAlB;AAAR,OAAf,CADmB,CAAvB;AAGA,UAAIC,KAAY,GAAG,EAAnB;;AACA,WAAK,MAAM3B,MAAX,IAAqBmB,UAArB,EAAiC;AAC7B,YAAI,CAACnB,MAAM,CAACc,EAAZ,EAAgB,SADa,CACH;;AAC1B,YAAIc,MAAM,GAAG,MAAMxB,SAAS,CAACyB,wBAAV,CAAmC7B,MAAM,CAACc,EAA1C,EACfO,IAAI,CAACC,SAAL,CAAe;AACXC,UAAAA,KAAK,EAAE;AACHO,YAAAA,SAAS,EAAE;AAACC,cAAAA,OAAO,EAAE,CAAC,CAAC,IAAIL,IAAJ,EAAD,GAAc,IAAI,EAAJ,GAAS,IAAT,GAAgB,IAA/B,EAAqC,IAAIA,IAAJ,EAArC;AAAV,aADR;AAEHM,YAAAA,YAAY,EAAE;AAACC,cAAAA,GAAG,EAAE;AAAN;AAFX,WADI;AAKXC,UAAAA,KAAK,EAAE,gBALI;AAKc;AACzBC,UAAAA,KAAK,EAAErC;AANI,SAAf,CADe,CAAnB,CAF6B,CAY7B;;AACAD,QAAAA,UAAU,GAAGG,MAAM,CAACoC,IAApB;AACAR,QAAAA,MAAM,CAACS,OAAP,CAAeC,KAAK,IAAI;AAAA;;AACpB;AACAX,UAAAA,KAAK,CAACY,IAAN,CAAW/C,MAAM,CAAC,IAAIkC,IAAJ,CAASY,KAAK,CAACR,SAAf,CAAD,EAA4B,IAA5B,CAAjB;AACAH,UAAAA,KAAK,CAACY,IAAN,oBAAWD,KAAK,CAACE,QAAjB,oDAAW,gBAAgBC,GAA3B;AACAd,UAAAA,KAAK,CAACY,IAAN,qBAAWD,KAAK,CAACE,QAAjB,qDAAW,iBAAgBE,GAA3B;AACAf,UAAAA,KAAK,CAACY,IAAN,CAAWD,KAAK,CAACK,QAAjB;AACAhB,UAAAA,KAAK,CAACY,IAAN,CAAWD,KAAK,CAACM,cAAjB;AACH,SAPD;AAQH;;AACD,WAAKC,QAAL,CAAc;AAAClB,QAAAA;AAAD,OAAd;AACH,KA3CD,CA2CE,OAAOmB,CAAP,EAAU;AACR9B,MAAAA,OAAO,CAACC,KAAR,CAAc,oBAAd,EAAoC6B,CAApC;AACH;AACJ,GA/CD;;AAiDA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACI;AAAA,kBAAK9C,MAAM,CAACoC;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAIQ;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,kCACA;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,mCACQ;AAAK,cAAA,SAAS,EAAC,YAAf;AAAA,qCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA,kBADA,eAMI;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,mCACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,C,CAED;;;AACA,OAAO,MAAMW,SAAN,SAAwB5D,SAAxB,CAAsC;AACzC6D,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEvB,MAAAA,KAAK,EAAE;AAAT,KAAb;AACH,GAJwC,CAMzC;;;AACA,QAAM1B,mBAAN,GAA4B;AACxB,QAAI;AACA,YAAMC,MAAM,GAAG,IAAIZ,aAAJ,EAAf;AACA,YAAMa,OAAO,GAAG,IAAId,OAAJ,CAAYa,MAAZ,CAAhB;AACA,YAAME,SAAS,GAAG,IAAIhB,SAAJ,CAAcc,MAAd,CAAlB;;AACA,UAAI;AACA,YAAIG,KAAK,GAAG,MAAMF,OAAO,CAACG,SAAR,CAAkB;AAACC,UAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,+BAAvB;AAAwDC,UAAAA,QAAQ,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAA9E,SAAlB,CAAlB;AACAV,QAAAA,MAAM,CAACW,WAAP,GAAqBR,KAAK,CAACS,EAA3B;AACAZ,QAAAA,MAAM,CAACa,MAAP,GAAiB,GAAEV,KAAK,CAACU,MAAO,EAAhC;AAEH,OALD,CAKE,MAAM;AACJC,QAAAA,OAAO,CAACC,KAAR,CAAc,cAAd;AACAC,QAAAA,KAAK,CAAC,YAAD,CAAL;AACA;AACH;;AAED,UAAIC,UAAU,GAAG,MAAMhB,OAAO,CAACiB,uBAAR,CAAgClB,MAAM,CAACa,MAAvC,EACnBM,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,KAAK,EAAE;AAACC,UAAAA,cAAc,EAAG;AAACC,YAAAA,EAAE,EAAE,CAAC,IAAIC,IAAJ,EAAD,GAAc,IAAI,EAAJ,GAAS,IAAT,GAAgB;AAAnC;AAAlB;AAAR,OAAf,CADmB,CAAvB;AAGA,UAAIC,KAAY,GAAG,EAAnB;;AACA,WAAK,MAAM3B,MAAX,IAAqBmB,UAArB,EAAiC;AAC7B,YAAI,CAACnB,MAAM,CAACc,EAAZ,EAAgB,SADa,CACH;;AAC1B,YAAIc,MAAM,GAAG,MAAMxB,SAAS,CAACyB,wBAAV,CAAmC7B,MAAM,CAACc,EAA1C,EACfO,IAAI,CAACC,SAAL,CAAe;AACXC,UAAAA,KAAK,EAAE;AACHO,YAAAA,SAAS,EAAE;AAACC,cAAAA,OAAO,EAAE,CAAC,CAAC,IAAIL,IAAJ,EAAD,GAAc,IAAI,EAAJ,GAAS,IAAT,GAAgB,IAA/B,EAAqC,IAAIA,IAAJ,EAArC;AAAV,aADR;AAEHM,YAAAA,YAAY,EAAE;AAACC,cAAAA,GAAG,EAAE;AAAN;AAFX,WADI;AAKXC,UAAAA,KAAK,EAAE,gBALI;AAKc;AACzBC,UAAAA,KAAK,EAAErC;AANI,SAAf,CADe,CAAnB,CAF6B,CAY7B;;AACAD,QAAAA,UAAU,GAAGG,MAAM,CAACoC,IAApB;AACAR,QAAAA,MAAM,CAACS,OAAP,CAAeC,KAAK,IAAI;AAAA;;AACpB;AACAX,UAAAA,KAAK,CAACY,IAAN,CAAW/C,MAAM,CAAC,IAAIkC,IAAJ,CAASY,KAAK,CAACR,SAAf,CAAD,EAA4B,IAA5B,CAAjB;AACAH,UAAAA,KAAK,CAACY,IAAN,qBAAWD,KAAK,CAACE,QAAjB,qDAAW,iBAAgBC,GAA3B;AACAd,UAAAA,KAAK,CAACY,IAAN,qBAAWD,KAAK,CAACE,QAAjB,qDAAW,iBAAgBE,GAA3B;AACAf,UAAAA,KAAK,CAACY,IAAN,CAAWD,KAAK,CAACK,QAAjB;AACAhB,UAAAA,KAAK,CAACY,IAAN,CAAWD,KAAK,CAACM,cAAjB;AACH,SAPD;AAQH;;AACD,WAAKC,QAAL,CAAc;AAAClB,QAAAA;AAAD,OAAd;AACH,KA3CD,CA2CE,OAAOmB,CAAP,EAAU;AACR9B,MAAAA,OAAO,CAACC,KAAR,CAAc,oBAAd,EAAoC6B,CAApC;AACH;AACJ;;AAEDK,EAAAA,iBAAiB,GAAG;AAChB,SAAKlD,mBAAL,GAA2BmD,IAA3B;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL;AACA;AACA,QAAIC,UAAU,GAAG,CAAjB;AAEA,QAAIC,IAAkB,GAAG,EAAzB;AACA,QAAIC,OAAO,GAAG,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAI3D,WAAW,GAAGwD,UAAnC,EAAgDG,CAAC,IAAIH,UAArD,EAAiE;AAAE;AAC/DC,MAAAA,IAAI,CAAChB,IAAL,CACI;AAAIzB,QAAAA,EAAE,EAAE0C,OAAR;AACIE,QAAAA,IAAI,EAAG,KAAKR,KAAN,CAAoBvB,KAApB,CAA0B8B,CAA1B,CADV;AAEIE,QAAAA,IAAI,EAAG,KAAKT,KAAN,CAAoBvB,KAApB,CAA0B8B,CAAC,GAAC,CAA5B,CAFV;AAGIG,QAAAA,IAAI,EAAG,KAAKV,KAAN,CAAoBvB,KAApB,CAA0B8B,CAAC,GAAC,CAA5B,CAHV;AAIII,QAAAA,IAAI,EAAG,KAAKX,KAAN,CAAoBvB,KAApB,CAA0B8B,CAAC,GAAC,CAA5B,CAJV;AAKIK,QAAAA,IAAI,EAAG,KAAKZ,KAAN,CAAoBvB,KAApB,CAA0B8B,CAAC,GAAC,CAA5B;AALV,OADJ;AASAD,MAAAA,OAAO;AACV;;AACD,QAAIO,OAAO,GAAG,CAAE;AACZ;AAACC,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,UAAU,EAAE,MAA5B;AAAoCC,MAAAA,KAAK,EAAE;AAA3C,KADU,EAEV;AAACF,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,UAAU,EAAE,UAA5B;AAAwCC,MAAAA,KAAK,EAAE;AAA/C,KAFU,EAGV;AAACF,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,UAAU,EAAE,WAA5B;AAAyCC,MAAAA,KAAK,EAAE;AAAhD,KAHU,EAIV;AAACF,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,UAAU,EAAE,mBAA5B;AAAiDC,MAAAA,KAAK,EAAE,GAAxD;AAA6DC,MAAAA,IAAI,EAAE;AAAnE,KAJU,EAKV;AAACH,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,UAAU,EAAE,iBAA5B;AAA+CC,MAAAA,KAAK,EAAE,GAAtD;AAA2DC,MAAAA,IAAI,EAAE;AAAjE,KALU,CAAd;AAQA;AAAA;AACI;AACA;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE,GAAV;AAAeF,UAAAA,KAAK,EAAE;AAAtB,SAAZ;AAAA,gCACA,QAAC,SAAD;AAAW,UAAA,OAAO,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAApB;AAAmD,UAAA,QAAQ,EAAE,YAA7D;AAAA,iCACI,QAAC,UAAD;AAAY,YAAA,IAAI,EAAEX,IAAlB;AAAwB,YAAA,IAAI,EAAE1D,UAA9B;AAAA,oCACI,QAAC,WAAD;AAAa,cAAA,KAAK,EAAC,MAAnB;AAA0B,cAAA,KAAK,EAAE;AAAjC;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,WAAD;AAAa,cAAA,KAAK,EAAC,UAAnB;AAA8B,cAAA,KAAK,EAAE;AAArC;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI,QAAC,WAAD;AAAa,cAAA,KAAK,EAAC,WAAnB;AAA+B,cAAA,KAAK,EAAE;AAAtC;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII,QAAC,WAAD;AAAa,cAAA,KAAK,EAAC,kBAAnB;AAAsC,cAAA,KAAK,EAAE;AAA7C;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAKI,QAAC,WAAD;AAAa,cAAA,KAAK,EAAC,eAAnB;AAAmC,cAAA,KAAK,EAAE;AAA1C;AAAA;AAAA;AAAA;AAAA,oBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADA,eAUA,QAAC,QAAD;AAAU,UAAA,IAAI,EAAE0D,IAAhB;AAAsB,UAAA,OAAO,EAAEQ;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAeH;;AAtGwC;AAyG7C,eAAehE,IAAf","sourcesContent":["/* \nfile: cards.tsx \n    file for the individual tracker pages\n    will need to implement csv or excel export here\n    will need to change the datatable component into an actual table \n        - currently is a listing of data\n*/\n\nimport React, {Component} from 'react'\nimport {DeviceApi, UserApi} from \"./lb-api\";\nimport {Configuration} from \"./lb-api/configuration\";\nimport Map from './Map';\n\n// Table Creation\nimport { DataGrid, GridRowsProp, GridColDef } from '@material-ui/data-grid';\nimport { format } from 'date-fns'\n\n\n// Excel \nimport ReactExport from \"react-export-excel\";\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\nvar deviceIDEX; //to have device name in excel sheet\n\n//variables for determining data points\nvar numberPulls = 50;\n\n// card function to display device name and datatable\nfunction card(device) {\n    // get the devices and points\n    const getDevicesAndPoints = async () => {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            const deviceApi = new DeviceApi(config);\n            try {\n                let token = await userApi.userLogin({username: process.env.REACT_APP_LIGHTBUG_API_USERNAME, password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let allDevices = await userApi.userPrototypeGetDevices(config.userId,\n                JSON.stringify({where: {lastConnection : {gt: +new Date() - 7 * 24 * 3600 * 1000} }})\n            );\n            let items: any[] = [];\n            for (const device of allDevices) {\n                if (!device.id) continue; // prevent error on next line\n                let points = await deviceApi.devicePrototypeGetPoints(device.id,\n                    JSON.stringify({\n                        where: {\n                            timestamp: {between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]},\n                            locationType: {neq: 'invalid'}\n                        },\n                        order: 'timestamp DESC', // order by newest points first\n                        limit: numberPulls,\n                    }));\n                \n                // Where data gets individually sorted\n                deviceIDEX = device.name;\n                points.forEach(point => {\n                    // ---Bruteforce way, push all data points into a single 1-d array---\n                    items.push(format(new Date(point.timestamp), 'Pp'));\n                    items.push(point.location?.lat);\n                    items.push(point.location?.lng);\n                    items.push(point.altitude);\n                    items.push(point.batteryVoltage);\n                });\n            }\n            this.setState({items});\n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    return (\n        <div className=\"card fluid\">\n            <div className=\"section\"> \n                <h1>{device.name}</h1> \n            </div>\n                <div className=\"section double-padded\">\n                    <div className=\"container\">\n                        <div className=\"row\"> \n                        <div className=\"col-sm-4\">\n                                <div className=\"card fluid\"> \n                                    <p>battery life, other info</p>\n                                </div>\n                            </div>\n                            <div className=\"col-sm-8\">\n                                <DataTable />\n                            </div>\n                        </div>\n                    </div>\n            </div>\n        </div> \n    )\n}\n\n// DataTable Component \nexport class DataTable extends Component<{}> {\n    constructor(props) {\n        super(props);\n        this.state = { items: [] };\n    }\n\n    // get the devices and points\n    async getDevicesAndPoints() {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            const deviceApi = new DeviceApi(config);\n            try {\n                let token = await userApi.userLogin({username: process.env.REACT_APP_LIGHTBUG_API_USERNAME, password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let allDevices = await userApi.userPrototypeGetDevices(config.userId,\n                JSON.stringify({where: {lastConnection : {gt: +new Date() - 7 * 24 * 3600 * 1000} }})\n            );\n            let items: any[] = [];\n            for (const device of allDevices) {\n                if (!device.id) continue; // prevent error on next line\n                let points = await deviceApi.devicePrototypeGetPoints(device.id,\n                    JSON.stringify({\n                        where: {\n                            timestamp: {between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]},\n                            locationType: {neq: 'invalid'}\n                        },\n                        order: 'timestamp DESC', // order by newest points first\n                        limit: numberPulls,\n                    }));\n                \n                // Where data gets individually sorted\n                deviceIDEX = device.name;\n                points.forEach(point => {\n                    // ---Bruteforce way, push all data points into a single 1-d array---\n                    items.push(format(new Date(point.timestamp), 'Pp'));\n                    items.push(point.location?.lat);\n                    items.push(point.location?.lng);\n                    items.push(point.altitude);\n                    items.push(point.batteryVoltage);\n                });\n            }\n            this.setState({items});\n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    componentDidMount() {\n        this.getDevicesAndPoints().then();\n    }    \n\n    render() {\n        //uniqueData needs to be equal to number of unique data points wanted\n        //e.g. if getting date,latitude and longatude then uniqueData = 3;\n        var uniqueData = 5;\n\n        let rows: GridRowsProp = [];\n        let idCount = 0;\n        for (var i = 0; i < (numberPulls * uniqueData); i += uniqueData) { //sets rows for table\n            rows.push(\n                {   id: idCount,\n                    col1: (this.state as any).items[i],\n                    col2: (this.state as any).items[i+1], \n                    col3: (this.state as any).items[i+2],\n                    col4: (this.state as any).items[i+3],\n                    col5: (this.state as any).items[i+4]\n                }\n            )\n            idCount++;\n        }\n        let columns = [ //sets columns for table\n            {field: 'col1', headerName: 'Date', width: 400 }, \n            {field: 'col2', headerName: 'Latitude', width: 200},\n            {field: 'col3', headerName: 'Longitude', width: 200,},\n            {field: 'col4', headerName: 'Altitude (Meters)', width: 200, hide: true},\n            {field: 'col5', headerName: 'Voltage (Volts)', width: 200, hide: true}\n          ];\n\n        return (\n            //Putting Data into Table\n            <div style={{ height: 800, width: '100%' }}>\n            <ExcelFile element={<button>Download Data</button>}filename={\"Eagle Data\"}>\n                <ExcelSheet data={rows} name={deviceIDEX}>\n                    <ExcelColumn label=\"Date\" value={\"col1\"}/>\n                    <ExcelColumn label=\"Latitude\" value={\"col2\"}/>\n                    <ExcelColumn label=\"Longitude\" value={\"col3\"}/>\n                    <ExcelColumn label=\"Altitude(Meters)\" value={\"col4\"}/>\n                    <ExcelColumn label=\"Voltage(Volts\" value={\"col5\"}/>\n                </ExcelSheet>\n            </ExcelFile>\n            <DataGrid rows={rows} columns={columns}/>\n            </div>\n        );\n    }\n}\n\nexport default card"]},"metadata":{},"sourceType":"module"}
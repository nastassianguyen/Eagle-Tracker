{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nastassianguyen/Desktop/proj/EagleTracker/src/cards.tsx\",\n    _s = $RefreshSig$();\n\n/* \nfile: cards.tsx \n    file for the individual tracker pages\n    will need to implement csv or excel export here\n    will need to change the datatable component into an actual table \n        - currently is a listing of data\n*/\nimport React, { useEffect } from 'react';\nimport { DeviceApi, UserApi } from \"./lb-api\";\nimport { Configuration } from \"./lb-api/configuration\";\n// Table Creation\nimport { DataGrid } from '@material-ui/data-grid';\nimport { format } from 'date-fns'; // Excel \n\nimport ReactExport from \"react-export-excel\";\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\nvar deviceIDEX; //to have device name in excel sheet\n//variables for determining data points\n\nvar numberPulls = 50;\n\n// card function to display device name and datatable\nfunction Card(device) {\n  _s();\n\n  const [tableItems, setTableItems] = React.useState([]);\n  useEffect(() => {\n    getDevicesAndPoints();\n  }, []); // get the devices and points\n\n  const getDevicesAndPoints = async () => {\n    try {\n      const config = new Configuration();\n      const userApi = new UserApi(config);\n      const deviceApi = new DeviceApi(config);\n\n      try {\n        let token = await userApi.userLogin({\n          username: process.env.REACT_APP_LIGHTBUG_API_USERNAME,\n          password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD\n        });\n        config.accessToken = token.id;\n        config.userId = `${token.userId}`;\n      } catch {\n        console.error('Login Failed');\n        alert('Login Fail');\n        return;\n      }\n\n      let items = [];\n      let points = await deviceApi.devicePrototypeGetPoints(device.id, JSON.stringify({\n        where: {\n          timestamp: {\n            between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]\n          },\n          locationType: {\n            neq: 'invalid'\n          }\n        },\n        order: 'timestamp DESC',\n        // order by newest points first\n        limit: numberPulls\n      })); // Where data gets individually sorted\n\n      deviceIDEX = device.name;\n      points.forEach(point => {\n        var _point$location, _point$location2;\n\n        // ---Bruteforce way, push all data points into a single 1-d array---\n        items.push(format(new Date(point.timestamp), 'Pp'));\n        items.push((_point$location = point.location) === null || _point$location === void 0 ? void 0 : _point$location.lat);\n        items.push((_point$location2 = point.location) === null || _point$location2 === void 0 ? void 0 : _point$location2.lng);\n        items.push(point.altitude);\n        items.push(point.batteryVoltage);\n      });\n      setTableItems(items);\n    } catch (e) {\n      console.error(\"Failed to get data\", e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card fluid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: device.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section double-padded\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card fluid\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"battery life, other info\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-8\",\n            children: /*#__PURE__*/_jsxDEV(DataTable, {\n              tableItems: tableItems\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n} // DataTable Component \n\n\n_s(Card, \"NZvnR8gdgxYvHfEdqKQKaCV2La4=\");\n\n_c = Card;\n\nconst DataTable = ({\n  tableItems\n}) => {\n  //uniqueData needs to be equal to number of unique data points wanted\n  //e.g. if getting date,latitude and longatude then uniqueData = 3;\n  var uniqueData = 5;\n  let rows = [];\n  let idCount = 0;\n\n  for (var i = 0; i < numberPulls * uniqueData; i += uniqueData) {\n    //sets rows for table\n    rows.push({\n      id: idCount,\n      col1: tableItems[i],\n      col2: tableItems[i + 1],\n      col3: tableItems[i + 2],\n      col4: tableItems[i + 3],\n      col5: tableItems[i + 4]\n    });\n    idCount++;\n  }\n\n  let columns = [//sets columns for table\n  {\n    field: 'col1',\n    headerName: 'Date',\n    width: 400\n  }, {\n    field: 'col2',\n    headerName: 'Latitude',\n    width: 200\n  }, {\n    field: 'col3',\n    headerName: 'Longitude',\n    width: 200\n  }, {\n    field: 'col4',\n    headerName: 'Altitude (Meters)',\n    width: 200,\n    hide: true\n  }, {\n    field: 'col5',\n    headerName: 'Voltage (Volts)',\n    width: 200,\n    hide: true\n  }];\n  return (\n    /*#__PURE__*/\n    //Putting Data into Table\n    _jsxDEV(\"div\", {\n      style: {\n        height: 800,\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(ExcelFile, {\n        element: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Download Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 29\n        }, this),\n        filename: \"Eagle Data\",\n        children: /*#__PURE__*/_jsxDEV(ExcelSheet, {\n          data: rows,\n          name: deviceIDEX,\n          children: [/*#__PURE__*/_jsxDEV(ExcelColumn, {\n            label: \"Date\",\n            value: \"col1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ExcelColumn, {\n            label: \"Latitude\",\n            value: \"col2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ExcelColumn, {\n            label: \"Longitude\",\n            value: \"col3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ExcelColumn, {\n            label: \"Altitude(Meters)\",\n            value: \"col4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ExcelColumn, {\n            label: \"Voltage(Volts\",\n            value: \"col5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: rows,\n        columns: columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_c2 = DataTable;\nexport default Card;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"DataTable\");","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/cards.tsx"],"names":["React","useEffect","DeviceApi","UserApi","Configuration","DataGrid","format","ReactExport","ExcelFile","ExcelSheet","ExcelColumn","deviceIDEX","numberPulls","Card","device","tableItems","setTableItems","useState","getDevicesAndPoints","config","userApi","deviceApi","token","userLogin","username","process","env","REACT_APP_LIGHTBUG_API_USERNAME","password","REACT_APP_LIGHTBUG_API_PASSWORD","accessToken","id","userId","console","error","alert","items","points","devicePrototypeGetPoints","JSON","stringify","where","timestamp","between","Date","locationType","neq","order","limit","name","forEach","point","push","location","lat","lng","altitude","batteryVoltage","e","DataTable","uniqueData","rows","idCount","i","col1","col2","col3","col4","col5","columns","field","headerName","width","hide","height"],"mappings":"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","sourcesContent":["/* \nfile: cards.tsx \n    file for the individual tracker pages\n    will need to implement csv or excel export here\n    will need to change the datatable component into an actual table \n        - currently is a listing of data\n*/\n\nimport React, {Component, useEffect} from 'react'\nimport {DeviceApi, UserApi} from \"./lb-api\";\nimport {Configuration} from \"./lb-api/configuration\";\nimport Map from './Map';\n\n// Table Creation\nimport { DataGrid, GridRowsProp, GridColDef } from '@material-ui/data-grid';\nimport { format } from 'date-fns'\n\n\n// Excel \nimport ReactExport from \"react-export-excel\";\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\nvar deviceIDEX; //to have device name in excel sheet\n\n//variables for determining data points\nvar numberPulls = 50;\n\ninterface Props {\n    tableItems: any[];\n}\n\n// card function to display device name and datatable\nfunction Card(device) {\n\n    const [tableItems, setTableItems] = React.useState<any[]>([]);\n\n    useEffect(() => {\n        getDevicesAndPoints();\n    }, []);\n\n    // get the devices and points\n    const getDevicesAndPoints = async () => {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            const deviceApi = new DeviceApi(config);\n            try {\n                let token = await userApi.userLogin({username: process.env.REACT_APP_LIGHTBUG_API_USERNAME, password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let items: any[] = [];\n            let points = await deviceApi.devicePrototypeGetPoints(device.id,\n                JSON.stringify({\n                    where: {\n                        timestamp: {between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]},\n                        locationType: {neq: 'invalid'}\n                    },\n                    order: 'timestamp DESC', // order by newest points first\n                    limit: numberPulls,\n                }));\n            \n            // Where data gets individually sorted\n            deviceIDEX = device.name;\n            points.forEach(point => {\n                // ---Bruteforce way, push all data points into a single 1-d array---\n                items.push(format(new Date(point.timestamp), 'Pp'));\n                items.push(point.location?.lat);\n                items.push(point.location?.lng);\n                items.push(point.altitude);\n                items.push(point.batteryVoltage);\n            });\n            setTableItems(items);\n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    return (\n        <div className=\"card fluid\">\n            <div className=\"section\"> \n                <h1>{device.name}</h1> \n            </div>\n                <div className=\"section double-padded\">\n                    <div className=\"container\">\n                        <div className=\"row\"> \n                        <div className=\"col-sm-4\">\n                                <div className=\"card fluid\"> \n                                    <p>battery life, other info</p>\n                                </div>\n                            </div>\n                            <div className=\"col-sm-8\">\n                                <DataTable tableItems={tableItems}/>\n                            </div>\n                        </div>\n                    </div>\n            </div>\n        </div> \n    )\n}\n\n// DataTable Component \nconst DataTable: React.FC<Props> = ({tableItems})  => {   \n    //uniqueData needs to be equal to number of unique data points wanted\n    //e.g. if getting date,latitude and longatude then uniqueData = 3;\n    var uniqueData = 5;\n\n    let rows: GridRowsProp = [];\n    let idCount = 0;\n    for (var i = 0; i < (numberPulls * uniqueData); i += uniqueData) { //sets rows for table\n        rows.push(\n            {   id: idCount,\n                col1: tableItems[i],\n                col2: tableItems[i+1], \n                col3: tableItems[i+2],\n                col4: tableItems[i+3],\n                col5: tableItems[i+4]\n            }\n        )\n        idCount++;\n    }\n    let columns = [ //sets columns for table\n        {field: 'col1', headerName: 'Date', width: 400 }, \n        {field: 'col2', headerName: 'Latitude', width: 200},\n        {field: 'col3', headerName: 'Longitude', width: 200,},\n        {field: 'col4', headerName: 'Altitude (Meters)', width: 200, hide: true},\n        {field: 'col5', headerName: 'Voltage (Volts)', width: 200, hide: true}\n        ];\n\n    return (\n        //Putting Data into Table\n        <div style={{ height: 800, width: '100%' }}>\n        <ExcelFile element={<button>Download Data</button>}filename={\"Eagle Data\"}>\n            <ExcelSheet data={rows} name={deviceIDEX}>\n                <ExcelColumn label=\"Date\" value={\"col1\"}/>\n                <ExcelColumn label=\"Latitude\" value={\"col2\"}/>\n                <ExcelColumn label=\"Longitude\" value={\"col3\"}/>\n                <ExcelColumn label=\"Altitude(Meters)\" value={\"col4\"}/>\n                <ExcelColumn label=\"Voltage(Volts\" value={\"col5\"}/>\n            </ExcelSheet>\n        </ExcelFile>\n        <DataGrid rows={rows} columns={columns}/>\n        </div>\n    );\n}\n\nexport default Card"]},"metadata":{},"sourceType":"module"}
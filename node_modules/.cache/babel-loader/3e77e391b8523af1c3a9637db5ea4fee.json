{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nastassianguyen/Desktop/proj/EagleTracker/src/Dashboard.tsx\";\n\n/* \nfile: Dashboard.tsx \n    file for the dashboard display of the devices\n*/\nimport React, { Component } from 'react';\nimport './App.css';\nimport { UserApi } from \"./lb-api\";\nimport { Configuration } from \"./lb-api/configuration\";\nexport class Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      devices: [],\n      rows: []\n    };\n  } // get list of devices in an array \n\n\n  async getDevices() {\n    try {\n      const config = new Configuration();\n      const userApi = new UserApi(config);\n\n      try {\n        let token = await userApi.userLogin({\n          username: process.env.REACT_APP_LIGHTBUG_API_USERNAME,\n          password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD\n        });\n        config.accessToken = token.id;\n        config.userId = `${token.userId}`;\n      } catch {\n        console.error('Login Failed');\n        alert('Login Fail');\n        return;\n      }\n\n      let allDevices = await userApi.userPrototypeGetDevices(config.userId, JSON.stringify({\n        where: {\n          lastConnection: {\n            gt: +new Date() - 7 * 24 * 3600 * 1000\n          }\n        }\n      }));\n      const devices = [];\n\n      for (const device of allDevices) {\n        if (!device.id) continue; // prevent error on next line\n\n        devices.push(device);\n        console.log(device);\n      }\n\n      const rows = [];\n\n      for (var i = 0; i < allDevices.length; i += 3) {\n        if (i + 2 < allDevices.length) {\n          rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"button\",\n                href: `/devices/${allDevices[i].id}`,\n                children: [\"Device \", allDevices[i].name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 33\n              }, this)\n            }, allDevices[i].id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"button\",\n                href: `/devices/${allDevices[i + 1].id}`,\n                children: [\"Device \", allDevices[i + 1].name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 33\n              }, this)\n            }, allDevices[i + 1].id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"button\",\n                href: `/devices/${allDevices[i + 2].id}`,\n                children: [\"Device \", allDevices[i + 2].name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 33\n              }, this)\n            }, allDevices[i + 2].id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this));\n        } else if (i + 2 >= allDevices.length) {\n          rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"button\",\n                href: `/devices/${allDevices[i].id}`,\n                children: [\"Device \", allDevices[i].name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 33\n              }, this)\n            }, allDevices[i].id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"button\",\n                href: `/devices/${allDevices[i + 1].id}`,\n                children: [\"Device \", allDevices[i + 1].name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 33\n              }, this)\n            }, allDevices[i + 1].id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\"\n            }, 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this));\n        } else if (i + 1 >= allDevices.length) {\n          rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"button\",\n                href: `/devices/${allDevices[i].id}`,\n                children: [\"Device \", allDevices[i].name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 33\n              }, this)\n            }, allDevices[i].id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\"\n            }, 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm\"\n            }, 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this));\n        }\n      }\n\n      this.setState({\n        devices: devices\n      });\n      this.setState({\n        rows: rows\n      });\n    } catch (e) {\n      console.error(\"Failed to get data\", e);\n    }\n  } // return promist after component mounts to DOM\n\n\n  componentDidMount() {\n    this.getDevices().then();\n  } // render function - displays listing of devices as links \n\n\n  render() {\n    var _rows;\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"responsive-padding\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card fluid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Eagle Tracker Database\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section double-padded\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container\",\n            children: ((_rows = this.state.rows) === null || _rows === void 0 ? void 0 : _rows.length) ? this.state.rows : 'Loading...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default Dashboard;","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/Dashboard.tsx"],"names":["React","Component","UserApi","Configuration","Dashboard","constructor","props","state","devices","rows","getDevices","config","userApi","token","userLogin","username","process","env","REACT_APP_LIGHTBUG_API_USERNAME","password","REACT_APP_LIGHTBUG_API_PASSWORD","accessToken","id","userId","console","error","alert","allDevices","userPrototypeGetDevices","JSON","stringify","where","lastConnection","gt","Date","device","push","log","i","length","name","setState","e","componentDidMount","then","render"],"mappings":"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","sourcesContent":["/* \nfile: Dashboard.tsx \n    file for the dashboard display of the devices\n*/\n\nimport React, {Component} from 'react';\nimport './App.css';\nimport {UserApi} from \"./lb-api\";\nimport {Configuration} from \"./lb-api/configuration\";\n\n\ninterface dashboardState {\n    devices: any[];\n    rows: any[]\n}\n\nexport class Dashboard extends Component<{}, dashboardState> {\n    constructor(props:any) {\n        super(props);\n        this.state = { \n            devices: [],\n            rows: []\n         };\n    }\n\n    // get list of devices in an array \n    async getDevices() {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            try {\n                let token = await userApi.userLogin({username: process.env.REACT_APP_LIGHTBUG_API_USERNAME, password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let allDevices = await userApi.userPrototypeGetDevices(config.userId,\n                JSON.stringify({where: {lastConnection : {gt: +new Date() - 7 * 24 * 3600 * 1000} }})\n            );\n\n            const devices: any[] = [];\n            for (const device of allDevices) {\n                if (!device.id) continue; // prevent error on next line\n                devices.push(device);\n                console.log(device);\n            }\n\n            const rows: any[] = []\n            for (var i = 0; i < allDevices.length; i+=3) {\n                if (i + 2 < allDevices.length) {\n                    rows.push(\n                        <div key={i} className=\"row\">\n                            <div key={allDevices[i].id} className=\"col-sm\">\n                                <a className=\"button\" href={`/devices/${allDevices[i].id}`}>Device {allDevices[i].name}</a>\n                            </div>\n                            <div key={allDevices[i+1].id}className=\"col-sm\">\n                                <a className=\"button\" href={`/devices/${allDevices[i+1].id}`}>Device {allDevices[i+1].name}</a>\n                            </div>\n                            <div key={allDevices[i+2].id}className=\"col-sm\">\n                                <a className=\"button\" href={`/devices/${allDevices[i+2].id}`}>Device {allDevices[i+2].name}</a>\n                            </div>\n                        </div>\n                    )\n                } else if (i+2 >= allDevices.length) {\n                    rows.push(\n                        <div key={i} className=\"row\">\n                            <div key={allDevices[i].id} className=\"col-sm\">\n                                <a className=\"button\" href={`/devices/${allDevices[i].id}`}>Device {allDevices[i].name}</a>\n                            </div>\n                            <div key={allDevices[i+1].id} className=\"col-sm\">\n                                <a className=\"button\" href={`/devices/${allDevices[i+1].id}`}>Device {allDevices[i+1].name}</a>\n                            </div>\n                            <div key={0} className=\"col-sm\"></div>\n                        </div>\n                    )\n                } else if (i+1 >= allDevices.length) {\n                    rows.push(\n                        <div key={i} className=\"row\">\n                            <div key={allDevices[i].id} className=\"col-sm\">\n                                <a className=\"button\" href={`/devices/${allDevices[i].id}`}>Device {allDevices[i].name}</a>\n                            </div>\n                            <div key={0} className=\"col-sm\"></div>\n                            <div key={0} className=\"col-sm\"></div>\n                        </div>\n                    )\n                }\n            }\n\n            this.setState({devices: devices});\n            this.setState({rows: rows});\n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    // return promist after component mounts to DOM\n    componentDidMount() {\n        this.getDevices().then();\n    }\n\n    // render function - displays listing of devices as links \n    render() {\n        return (\n            <span className=\"responsive-padding\">\n                <div className=\"card fluid\">\n                    <div className=\"section\">\n                        <h1>Eagle Tracker Database</h1>\n                    </div>\n                    \n                    <div className=\"section double-padded\">\n                    <div className=\"container\">\n                        {(this.state as any).rows?.length ? (this.state as any).rows : 'Loading...'}\n                    </div>\n                    </div>\n                    \n                </div>\n            </span>\n        );\n    }\n\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nastassianguyen/Desktop/proj/EagleTracker/src/App.tsx\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { DeviceApi, UserApi } from \"./lb-api\";\nimport { Configuration } from \"./lb-api/configuration\";\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n    };\n  }\n\n  async getDevicesAndPoints() {\n    try {\n      const config = new Configuration();\n      const userApi = new UserApi(config);\n      const deviceApi = new DeviceApi(config);\n\n      try {\n        let token = await userApi.userLogin({\n          username: \"jpalad3@gatech.edu\",\n          password: \"EagleScouts4Life!\"\n        });\n        config.accessToken = token.id;\n        config.userId = `${token.userId}`;\n      } catch {\n        console.error('Login Failed');\n        alert('Login Fail');\n        return;\n      }\n\n      let allDevices = await userApi.userPrototypeGetDevices(config.userId, JSON.stringify({\n        where: {\n          lastConnection: {\n            gt: +new Date() - 7 * 24 * 3600 * 1000\n          }\n        }\n      }));\n      const items = [];\n\n      for (const device of allDevices) {\n        if (!device.id) continue; // prevent error on next line\n\n        let points = await deviceApi.devicePrototypeGetPoints(device.id, JSON.stringify({\n          // filter needs to be a JSON encoded string\n          //Optional query filters\n          where: {\n            timestamp: {\n              between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]\n            },\n            //alternatively using greater than operator (gt):\n            //timestamp: {gt: +new Date() - 7 * 24 * 3600 * 1000},\n            locationType: {\n              neq: 'invalid'\n            }\n          },\n          order: 'timestamp DESC' // order by newest points first\n          // limit: 5 //only get the 5 newest points\n\n        }));\n        const pointsItems = [];\n        points.forEach(point => {\n          var _point$location, _point$location2;\n\n          pointsItems.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"point\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: point.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this), \" - (\", (_point$location = point.location) === null || _point$location === void 0 ? void 0 : _point$location.lat, \", \", (_point$location2 = point.location) === null || _point$location2 === void 0 ? void 0 : _point$location2.lng, \")\"]\n          }, point.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this));\n        });\n        items.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"device-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Device \", device.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), pointsItems]\n        }, device.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this));\n      }\n\n      this.setState({\n        items\n      });\n    } catch (e) {\n      console.error(\"Failed to get data\", e);\n    }\n  }\n\n  componentDidMount() {\n    this.getDevicesAndPoints().then();\n  }\n\n  render() {\n    var _items;\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"LightBug API Example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), ((_items = this.state.items) === null || _items === void 0 ? void 0 : _items.length) ? this.state.items : 'Loading...']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/App.tsx"],"names":["React","Component","DeviceApi","UserApi","Configuration","App","constructor","props","state","items","getDevicesAndPoints","config","userApi","deviceApi","token","userLogin","username","password","accessToken","id","userId","console","error","alert","allDevices","userPrototypeGetDevices","JSON","stringify","where","lastConnection","gt","Date","device","points","devicePrototypeGetPoints","timestamp","between","locationType","neq","order","pointsItems","forEach","point","push","location","lat","lng","name","setState","e","componentDidMount","then","render","length"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport {DeviceApi, UserApi} from \"./lb-api\";\nimport {Configuration} from \"./lb-api/configuration\";\n\n\nexport class App extends Component {\n    constructor(props:any) {\n        super(props);\n        this.state = { items: [] };\n    }\n\n    async getDevicesAndPoints() {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            const deviceApi = new DeviceApi(config);\n            try {\n                let token = await userApi.userLogin({username: \"jpalad3@gatech.edu\", password: \"EagleScouts4Life!\"});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let allDevices = await userApi.userPrototypeGetDevices(config.userId,\n                JSON.stringify({where: {lastConnection : {gt: +new Date() - 7 * 24 * 3600 * 1000} }})\n            );\n\n            const items: any[] = [];\n            for (const device of allDevices) {\n                if (!device.id) continue; // prevent error on next line\n                let points = await deviceApi.devicePrototypeGetPoints(device.id,\n                    JSON.stringify({// filter needs to be a JSON encoded string\n                        //Optional query filters\n                        where: {\n                            timestamp: {between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]},\n                            //alternatively using greater than operator (gt):\n                            //timestamp: {gt: +new Date() - 7 * 24 * 3600 * 1000},\n                            locationType: {neq: 'invalid'}\n                        },\n                        order: 'timestamp DESC', // order by newest points first\n                        // limit: 5 //only get the 5 newest points\n                    }));\n\n                const pointsItems: any[] = [];\n                points.forEach(point => {\n                    pointsItems.push(\n                        <div key={point.id} className=\"point\">\n                            <b>{point.timestamp}</b> - ({point.location?.lat}, {point.location?.lng})\n                        </div>\n                    )\n                });\n\n                items.push(\n                    <div key={device.id} className=\"device-info\">\n                        <h3>Device {device.name}</h3>\n                        {pointsItems}\n                    </div>\n                )\n            }\n\n            this.setState({items});\n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    componentDidMount() {\n        this.getDevicesAndPoints().then();\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>LightBug API Example</h1>\n                {(this.state as any).items?.length ? (this.state as any).items : 'Loading...'}\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nastassianguyen/Desktop/proj/EagleTracker/src/Dashboard.tsx\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { DeviceApi, UserApi } from \"./lb-api\";\nimport { Configuration } from \"./lb-api/configuration\";\nimport NotFound from './components/notfound';\nexport class Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderDevices = routerProps => {\n      let device_id = parseInt(routerProps.match.params.id);\n      let foundDevice = this.state.items.find(device => device.id === device_id);\n      return foundDevice ? /*#__PURE__*/_jsxDEV(\"card\", {\n        device: foundDevice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 62\n      }, this);\n    };\n\n    this.state = {\n      items: []\n    };\n  }\n\n  async getDevicesAndPoints() {\n    try {\n      const config = new Configuration();\n      const userApi = new UserApi(config);\n      const deviceApi = new DeviceApi(config);\n\n      try {\n        let token = await userApi.userLogin({\n          username: \"jpalad3@gatech.edu\",\n          password: \"EagleScouts4Life!\"\n        });\n        config.accessToken = token.id;\n        config.userId = `${token.userId}`;\n      } catch {\n        console.error('Login Failed');\n        alert('Login Fail');\n        return;\n      }\n\n      let allDevices = await userApi.userPrototypeGetDevices(config.userId, JSON.stringify({\n        where: {\n          lastConnection: {\n            gt: +new Date() - 7 * 24 * 3600 * 1000\n          }\n        }\n      }));\n      const items = [];\n\n      for (const device of allDevices) {\n        if (!device.id) continue; // prevent error on next line\n\n        items.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"device-info\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Device \", device.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this)\n        }, device.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this));\n      }\n\n      this.setState({\n        items\n      });\n    } catch (e) {\n      console.error(\"Failed to get data\", e);\n    }\n  }\n\n  componentDidMount() {\n    this.getDevicesAndPoints().then();\n  }\n\n  render() {\n    var _items;\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Eagle Tracker Database\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), ((_items = this.state.items) === null || _items === void 0 ? void 0 : _items.length) ? this.state.items : 'Loading...']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default Dashboard;","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/Dashboard.tsx"],"names":["React","Component","DeviceApi","UserApi","Configuration","NotFound","Dashboard","constructor","props","renderDevices","routerProps","device_id","parseInt","match","params","id","foundDevice","state","items","find","device","getDevicesAndPoints","config","userApi","deviceApi","token","userLogin","username","password","accessToken","userId","console","error","alert","allDevices","userPrototypeGetDevices","JSON","stringify","where","lastConnection","gt","Date","push","name","setState","e","componentDidMount","then","render","length"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport './App.css';\nimport {DeviceApi, UserApi} from \"./lb-api\";\nimport {Configuration} from \"./lb-api/configuration\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { Button } from 'react-bootstrap';\nimport history from './history';\nimport card from './components/cards';\nimport NotFound from './components/notfound';\n\nexport class Dashboard extends Component {\n    constructor(props:any) {\n        super(props);\n        this.state = { items: [] };\n    }\n\n    \n\n    async getDevicesAndPoints() {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            const deviceApi = new DeviceApi(config);\n            try {\n                let token = await userApi.userLogin({username: \"jpalad3@gatech.edu\", password: \"EagleScouts4Life!\"});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let allDevices = await userApi.userPrototypeGetDevices(config.userId,\n                JSON.stringify({where: {lastConnection : {gt: +new Date() - 7 * 24 * 3600 * 1000} }})\n            );\n\n            const items: any[] = [];\n            for (const device of allDevices) {\n                if (!device.id) continue; // prevent error on next line\n\n                items.push(\n                    <div key={device.id} className=\"device-info\">\n                        <h3>Device {device.name}</h3>\n                        {/* <Button variant=\"btn btn-success\" onClick={() => history.push(`/${device.name}`)}>Click to view more</Button> */}\n                    </div>\n                )\n            }\n\n            this.setState({items});\n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    componentDidMount() {\n        this.getDevicesAndPoints().then();\n    }\n\n    renderDevices = (routerProps) => {\n        let device_id = parseInt(routerProps.match.params.id)\n        let foundDevice = this.state.items.find(device => device.id === device_id)\n        return (foundDevice ? <card device={foundDevice}/> : <NotFound/>)\n      }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Eagle Tracker Database</h1>\n                {(this.state as any).items?.length ? (this.state as any).items : 'Loading...'}\n            </div>\n        );\n    }\n\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nastassianguyen/Desktop/proj/EagleTracker/src/Dashboard.tsx\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { DeviceApi, UserApi } from \"./lb-api\";\nimport { Configuration } from \"./lb-api/configuration\";\nimport { Button } from 'react-bootstrap';\nimport history from './history';\nexport class Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n    };\n  }\n\n  async getDevicesAndPoints() {\n    try {\n      const config = new Configuration();\n      const userApi = new UserApi(config);\n      const deviceApi = new DeviceApi(config);\n\n      try {\n        let token = await userApi.userLogin({\n          username: \"jpalad3@gatech.edu\",\n          password: \"EagleScouts4Life!\"\n        });\n        config.accessToken = token.id;\n        config.userId = `${token.userId}`;\n      } catch {\n        console.error('Login Failed');\n        alert('Login Fail');\n        return;\n      }\n\n      let allDevices = await userApi.userPrototypeGetDevices(config.userId, JSON.stringify({\n        where: {\n          lastConnection: {\n            gt: +new Date() - 7 * 24 * 3600 * 1000\n          }\n        }\n      }));\n      const items = [];\n\n      for (const device of allDevices) {\n        if (!device.id) continue; // prevent error on next line\n        // let points = await deviceApi.devicePrototypeGetPoints(device.id,\n        //     JSON.stringify({// filter needs to be a JSON encoded string\n        //         //Optional query filters\n        //         where: {\n        //             timestamp: {between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]},\n        //             //alternatively using greater than operator (gt):\n        //             //timestamp: {gt: +new Date() - 7 * 24 * 3600 * 1000},\n        //             locationType: {neq: 'invalid'}\n        //         },\n        //         order: 'timestamp DESC', // order by newest points first\n        //         // limit: 5 //only get the 5 newest points\n        //     }));\n        // const pointsItems: any[] = [];\n        // points.forEach(point => {\n        //     var date = new Date(point.timestamp);\n        //     pointsItems.push(\n        //         <div key={point.id} className=\"point\">\n        //             <b>{date.toString()}</b> - ({point.location?.lat}, {point.location?.lng})\n        //         </div>\n        //     )\n        // });\n\n        items.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"device-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Device \", device.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"btn btn-success\",\n            onClick: () => history.push(`/${device.name}`),\n            children: \"Click to view more\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)]\n        }, device.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this));\n      }\n\n      this.setState({\n        items\n      });\n    } catch (e) {\n      console.error(\"Failed to get data\", e);\n    }\n  }\n\n  componentDidMount() {\n    this.getDevicesAndPoints().then();\n  }\n\n  render() {\n    var _items;\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Eagle Tracker Database\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), ((_items = this.state.items) === null || _items === void 0 ? void 0 : _items.length) ? this.state.items : 'Loading...']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default Dashboard;","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/Dashboard.tsx"],"names":["React","Component","DeviceApi","UserApi","Configuration","Button","history","Dashboard","constructor","props","state","items","getDevicesAndPoints","config","userApi","deviceApi","token","userLogin","username","password","accessToken","id","userId","console","error","alert","allDevices","userPrototypeGetDevices","JSON","stringify","where","lastConnection","gt","Date","device","push","name","setState","e","componentDidMount","then","render","length"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport './App.css';\nimport {DeviceApi, UserApi} from \"./lb-api\";\nimport {Configuration} from \"./lb-api/configuration\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { Button } from 'react-bootstrap';\nimport history from './history';\n\nexport class Dashboard extends Component {\n    constructor(props:any) {\n        super(props);\n        this.state = { items: [] };\n    }\n\n    async getDevicesAndPoints() {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            const deviceApi = new DeviceApi(config);\n            try {\n                let token = await userApi.userLogin({username: \"jpalad3@gatech.edu\", password: \"EagleScouts4Life!\"});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let allDevices = await userApi.userPrototypeGetDevices(config.userId,\n                JSON.stringify({where: {lastConnection : {gt: +new Date() - 7 * 24 * 3600 * 1000} }})\n            );\n\n            const items: any[] = [];\n            for (const device of allDevices) {\n                if (!device.id) continue; // prevent error on next line\n                // let points = await deviceApi.devicePrototypeGetPoints(device.id,\n                //     JSON.stringify({// filter needs to be a JSON encoded string\n                //         //Optional query filters\n                //         where: {\n                //             timestamp: {between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]},\n                //             //alternatively using greater than operator (gt):\n                //             //timestamp: {gt: +new Date() - 7 * 24 * 3600 * 1000},\n                //             locationType: {neq: 'invalid'}\n                //         },\n                //         order: 'timestamp DESC', // order by newest points first\n                //         // limit: 5 //only get the 5 newest points\n                //     }));\n\n                // const pointsItems: any[] = [];\n                // points.forEach(point => {\n                //     var date = new Date(point.timestamp);\n                //     pointsItems.push(\n                //         <div key={point.id} className=\"point\">\n                //             <b>{date.toString()}</b> - ({point.location?.lat}, {point.location?.lng})\n                //         </div>\n                //     )\n                // });\n\n                items.push(\n                    <div key={device.id} className=\"device-info\">\n                        <h3>Device {device.name}</h3>\n                        <Button variant=\"btn btn-success\" onClick={() => history.push(`/${device.name}`)}>Click to view more</Button>\n                    </div>\n                )\n            }\n\n            this.setState({items});\n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    componentDidMount() {\n        this.getDevicesAndPoints().then();\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Eagle Tracker Database</h1>\n                {(this.state as any).items?.length ? (this.state as any).items : 'Loading...'}\n            </div>\n        );\n    }\n\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}
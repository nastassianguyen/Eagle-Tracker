{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nastassianguyen/Desktop/proj/EagleTracker/src/Map.tsx\",\n    _s = $RefreshSig$();\n\n/* \nfile: Map.tsx \n    file for the map display of the most recent locations of devices\n    will need to implement google maps API in this component \n*/\nimport React, { useEffect } from 'react';\nimport './App.css';\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport { DeviceApi, UserApi } from \"./lb-api\";\nimport { Configuration } from \"./lb-api/configuration\";\nimport { formatRelative } from \"date-fns\";\nimport Geocode from \"react-geocode\";\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"100vh\",\n  align: \"center\",\n  maxWidth: \"100%\"\n};\nconst options = {\n  disableDefaultUI: true,\n  zoomControl: true\n}; // interface for device object\n\nexport default function Map() {\n  _s();\n\n  // react hooks maintaining center, devices, and selected \n  const [center, setCenter] = React.useState({\n    // state to re-render\n    lat: 0,\n    lng: 0\n  });\n  const [devices, setDevices] = React.useState([]);\n  const [selected, setSelected] = React.useState(null); // for rendering infowindow\n\n  const mapRef = React.useRef(); // ref to retain state without constant re-renders\n\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []); // for hooks \n\n  useEffect(() => {\n    getDevicesAndPoints();\n  }, []); // for reverse geocoding to get city/state/country\n\n  Geocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY); // function for getting the city/state/country \n\n  const getCityState = async point => {\n    let city = \"\",\n        state = \"\",\n        country = \"\";\n    const response = await Geocode.fromLatLng(String(point.lat), String(point.lng));\n    let parts = response.results[0].address_components;\n    parts.forEach(part => {\n      if (part.types.includes(\"locality\")) {\n        city = part.long_name;\n      } else if (part.types.includes(\"administrative_area_level_1\")) {\n        state = part.long_name;\n      } else if (part.types.includes(\"country\")) {\n        country = part.long_name;\n      } else {// do nothing\n      }\n    });\n    return [city, state, country];\n  }; // get the devices and most recent point\n\n\n  const getDevicesAndPoints = async () => {\n    try {\n      const config = new Configuration();\n      const userApi = new UserApi(config);\n      const deviceApi = new DeviceApi(config);\n\n      try {\n        let token = await userApi.userLogin({\n          username: process.env.REACT_APP_LIGHTBUG_API_USERNAME,\n          password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD\n        });\n        config.accessToken = token.id;\n        config.userId = `${token.userId}`;\n      } catch {\n        console.error('Login Failed');\n        alert('Login Fail');\n        return;\n      }\n\n      let allDevices = await userApi.userPrototypeGetDevices(config.userId, JSON.stringify({\n        where: {\n          lastConnection: {\n            gt: +new Date() - 7 * 24 * 3600 * 1000\n          }\n        }\n      }));\n      const locations = [];\n\n      for (const device of allDevices) {\n        var _points$0$location, _points$0$location2;\n\n        if (!device.id) continue; // prevent error on next line\n\n        let points = await deviceApi.devicePrototypeGetPoints(device.id, JSON.stringify({\n          where: {\n            timestamp: {\n              between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]\n            },\n            locationType: {\n              neq: 'invalid'\n            }\n          },\n          order: 'timestamp DESC',\n          // order by newest points first\n          limit: 1\n        })); // getting city/state/location\n\n        let where = await getCityState(points[0].location); // push to array\n\n        locations.push({\n          name: device.name,\n          id: device.id,\n          lat: (_points$0$location = points[0].location) === null || _points$0$location === void 0 ? void 0 : _points$0$location.lat,\n          lng: (_points$0$location2 = points[0].location) === null || _points$0$location2 === void 0 ? void 0 : _points$0$location2.lng,\n          time: points[0].timestamp,\n          city: where[0],\n          state: where[1],\n          country: where[2]\n        });\n      } // set device state\n\n\n      setDevices(locations); // get center of map based on most recent locations\n\n      let lat_sum = 0;\n      let lng_sum = 0;\n\n      for (let item of locations) {\n        lat_sum += item.lat;\n        lng_sum += item.lng;\n      }\n\n      const new_center = {\n        lat: lat_sum / locations.length,\n        lng: lng_sum / locations.length\n      }; // set center of map\n\n      setCenter(new_center);\n    } catch (e) {\n      console.error(\"Failed to get data\", e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"responsive-margin\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card fluid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"View All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section double-padded\",\n        children: /*#__PURE__*/_jsxDEV(LoadScript, {\n          googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n          children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n            mapContainerStyle: mapContainerStyle,\n            zoom: 12,\n            center: center,\n            options: options,\n            onLoad: onMapLoad,\n            children: [devices.map(device => /*#__PURE__*/_jsxDEV(Marker, {\n              title: device.name,\n              visible: true,\n              clickable: true,\n              position: {\n                lat: device.lat,\n                lng: device.lng\n              },\n              onMouseOver: () => {\n                setSelected(device);\n              } // onMouseOut={() => {\n              //     setSelected(null);\n              // }}\n              // onClick={() => {\n              //     setSelected(device);\n              // }}\n\n            }, device.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }, this)), selected && /*#__PURE__*/_jsxDEV(InfoWindow, {\n              onCloseClick: () => {\n                setSelected(null);\n              },\n              position: {\n                lat: selected.lat,\n                lng: selected.lng\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card fluid\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"section\",\n                  children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                    children: [\"Tracker \", selected.name]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 204,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"section\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Last seen: \", formatRelative(new Date(selected.time), new Date())]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"In \", selected.city, \", \", selected.state, \", \", selected.country]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 208,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                    className: \"button\",\n                    href: `/devices/${selected.id}`,\n                    children: \"View more\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 211,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 39\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Map, \"QEWHPjeSvi6oCDsBhGg+MwbsSXM=\");\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/Map.tsx"],"names":["React","useEffect","GoogleMap","LoadScript","Marker","InfoWindow","DeviceApi","UserApi","Configuration","formatRelative","Geocode","mapContainerStyle","width","height","align","maxWidth","options","disableDefaultUI","zoomControl","Map","center","setCenter","useState","lat","lng","devices","setDevices","selected","setSelected","mapRef","useRef","onMapLoad","useCallback","map","current","getDevicesAndPoints","setApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","getCityState","point","city","state","country","response","fromLatLng","String","parts","results","address_components","forEach","part","types","includes","long_name","config","userApi","deviceApi","token","userLogin","username","REACT_APP_LIGHTBUG_API_USERNAME","password","REACT_APP_LIGHTBUG_API_PASSWORD","accessToken","id","userId","console","error","alert","allDevices","userPrototypeGetDevices","JSON","stringify","where","lastConnection","gt","Date","locations","device","points","devicePrototypeGetPoints","timestamp","between","locationType","neq","order","limit","location","push","name","time","lat_sum","lng_sum","item","new_center","length","e"],"mappings":"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","sourcesContent":["/* \nfile: Map.tsx \n    file for the map display of the most recent locations of devices\n    will need to implement google maps API in this component \n*/\n\nimport React, {useEffect} from 'react';\nimport './App.css';\nimport {\n    GoogleMap,\n    LoadScript,\n    Marker,\n    InfoWindow,\n} from \"@react-google-maps/api\";\nimport {DeviceApi, UserApi} from \"./lb-api\";\nimport {Configuration} from \"./lb-api/configuration\";\nimport {formatRelative} from \"date-fns\";\nimport Geocode from \"react-geocode\";\n\n\nconst mapContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n    align: \"center\",\n    maxWidth: \"100%\",\n};\n\nconst options = {\n    disableDefaultUI: true,\n    zoomControl: true,\n}\n\n// interface for device object\nexport interface Device {\n    name: string;\n    id: number;\n    lat: number;\n    lng: number;\n    time: Date;\n    city: string;\n    state: string;\n    country: string;\n}\n\nexport default function Map() {\n    // react hooks maintaining center, devices, and selected \n    const [center, setCenter] = React.useState({ // state to re-render\n        lat: 0,\n        lng: 0,\n    });\n    \n    const [devices, setDevices] = React.useState<Device[]>([]);\n    const [selected, setSelected] = React.useState<Device | null>(null); // for rendering infowindow\n\n    const mapRef = React.useRef(); // ref to retain state without constant re-renders\n    const onMapLoad = React.useCallback((map) => {\n        mapRef.current = map;\n    }, []);\n\n    // for hooks \n    useEffect(() => {\n        getDevicesAndPoints();\n    }, []);\n\n    // for reverse geocoding to get city/state/country\n    Geocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n\n    // function for getting the city/state/country \n    const getCityState = async (point) => {\n        let city = \"\", state = \"\", country = \"\";\n        const response = await Geocode.fromLatLng(String(point.lat), String(point.lng));\n        let parts = response.results[0].address_components;\n        parts.forEach(part => {\n            if (part.types.includes(\"locality\")) {\n                city = part.long_name;\n            } else if (part.types.includes(\"administrative_area_level_1\")) {\n                state = part.long_name;\n            } else if (part.types.includes(\"country\")) {\n                country = part.long_name;\n            } else {\n                // do nothing\n            }\n        })\n        return [city, state, country];\n    }\n\n    // get the devices and most recent point\n    const getDevicesAndPoints = async () => {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            const deviceApi = new DeviceApi(config);\n            try {\n                let token = await userApi.userLogin({username: process.env.REACT_APP_LIGHTBUG_API_USERNAME, password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let allDevices = await userApi.userPrototypeGetDevices(config.userId,\n                JSON.stringify({where: {lastConnection : {gt: +new Date() - 7 * 24 * 3600 * 1000} }})\n            );\n\n            const locations: any[] = [];\n            for (const device of allDevices) {\n                if (!device.id) continue; // prevent error on next line\n                let points = await deviceApi.devicePrototypeGetPoints(device.id,\n                    JSON.stringify({\n                        where: {\n                            timestamp: {between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]},\n                            locationType: {neq: 'invalid'}\n                        },\n                        order: 'timestamp DESC', // order by newest points first\n                        limit: 1,\n                    }));\n\n                // getting city/state/location\n                let where = await getCityState(points[0].location);\n\n                // push to array\n                locations.push(\n                    {\n                        name: device.name,\n                        id: device.id,\n                        lat: points[0].location?.lat,\n                        lng: points[0].location?.lng,\n                        time: points[0].timestamp,\n                        city: where[0],\n                        state: where[1],\n                        country: where[2],\n                    }\n                )\n                \n            }\n            // set device state\n            setDevices(locations);\n\n            // get center of map based on most recent locations\n            let lat_sum = 0;\n            let lng_sum = 0;\n            for (let item of locations) {\n                lat_sum += item.lat; \n                lng_sum += item.lng;\n            }\n            const new_center = {\n                lat: lat_sum / locations.length,\n                lng: lng_sum / locations.length\n            };\n            // set center of map\n            setCenter(new_center);\n            \n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    return (\n        <span className= \"responsive-margin\">\n            <div className=\"card fluid\">\n                <div className=\"section\">\n                <h1>View All</h1>\n                </div>\n                <div className=\"section double-padded\">\n                <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY!}>\n                    <GoogleMap \n                        mapContainerStyle={mapContainerStyle} \n                        zoom = {12} \n                        center = {center}\n                        options = {options} \n                        onLoad={onMapLoad} > \n                        {devices.map((device) => (\n                            <Marker \n                                key={device.id}\n                                title={device.name}\n                                visible={true}\n                                clickable={true}\n                                position={{lat:device.lat, lng: device.lng}}\n                                onMouseOver={() => {\n                                    setSelected(device);\n                                }}\n                                // onMouseOut={() => {\n                                //     setSelected(null);\n                                // }}\n                                // onClick={() => {\n                                //     setSelected(device);\n                                // }}\n                            />\n                        ))}\n\n                        {selected && (<InfoWindow\n                        \n                            onCloseClick={() => {\n                                setSelected(null);\n                             }}\n                            position={{\n                                lat: selected.lat,\n                                lng: selected.lng\n                            }} > \n                            <div className=\"card fluid\">\n                                <div className=\"section\">\n                                    <h4>Tracker {selected.name}</h4>    \n                                </div>\n                                <div className=\"section\">\n                                    <p>Last seen: {formatRelative(new Date(selected.time), new Date())}</p>\n                                    <p>In {selected.city}, {selected.state}, {selected.country}</p>\n                                    {/* <p>Lat: {selected.lat}</p>\n                                    <p>Lng: {selected.lng}</p> */}\n                                    <a className=\"button\" href={`/devices/${selected.id}`}>View more</a>\n                                </div>\n                                        \n                            </div>\n\n                        </InfoWindow>)}\n                    </GoogleMap>\n                </LoadScript>\n                </div>\n            </div>\n        </span>\n    );\n}"]},"metadata":{},"sourceType":"module"}
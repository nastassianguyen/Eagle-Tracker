{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nastassianguyen/Desktop/proj/EagleTracker/src/cards.tsx\";\n\n/* \nfile: cards.tsx \n    file for the individual tracker pages\n    will need to implement csv or excel export here\n    will need to change the datatable component into an actual table \n        - currently is a listing of data\n*/\nimport React, { Component } from 'react';\nimport { DeviceApi, UserApi } from \"./lb-api\";\nimport { Configuration } from \"./lb-api/configuration\"; // card function to display device name and datatable\n\nfunction card(device) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"This is device \", device.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n} // DataTable Component \n\n\nexport class DataTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n    };\n  } // get the devices and points\n\n\n  async getDevicesAndPoints() {\n    try {\n      const config = new Configuration();\n      const userApi = new UserApi(config);\n      const deviceApi = new DeviceApi(config);\n\n      try {\n        let token = await userApi.userLogin({\n          username: \"jpalad3@gatech.edu\",\n          password: \"EagleScouts4Life!\"\n        });\n        config.accessToken = token.id;\n        config.userId = `${token.userId}`;\n      } catch {\n        console.error('Login Failed');\n        alert('Login Fail');\n        return;\n      }\n\n      let allDevices = await userApi.userPrototypeGetDevices(config.userId, JSON.stringify({\n        where: {\n          lastConnection: {\n            gt: +new Date() - 7 * 24 * 3600 * 1000\n          }\n        }\n      }));\n      const items = [];\n\n      for (const device of allDevices) {\n        if (!device.id) continue; // prevent error on next line\n\n        let points = await deviceApi.devicePrototypeGetPoints(device.id, JSON.stringify({\n          // filter needs to be a JSON encoded string\n          //Optional query filters\n          where: {\n            timestamp: {\n              between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]\n            },\n            //alternatively using greater than operator (gt):\n            //timestamp: {gt: +new Date() - 7 * 24 * 3600 * 1000},\n            locationType: {\n              neq: 'invalid'\n            }\n          },\n          order: 'timestamp DESC' // order by newest points first\n\n        }));\n        const pointsItems = [];\n        points.forEach(point => {\n          var _point$location, _point$location2;\n\n          var date = new Date(point.timestamp);\n          pointsItems.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"point\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: date.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this), \" - (\", (_point$location = point.location) === null || _point$location === void 0 ? void 0 : _point$location.lat, \", \", (_point$location2 = point.location) === null || _point$location2 === void 0 ? void 0 : _point$location2.lng, \") - \", point.currentUsed]\n          }, point.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this));\n        });\n        items.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"device-info\",\n          children: pointsItems\n        }, device.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this));\n      }\n\n      this.setState({\n        items\n      });\n    } catch (e) {\n      console.error(\"Failed to get data\", e);\n    }\n  }\n\n  componentDidMount() {\n    this.getDevicesAndPoints().then();\n  }\n\n  render() {\n    var _items;\n\n    console.log(this.props);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), ((_items = this.state.items) === null || _items === void 0 ? void 0 : _items.length) ? this.state.items : 'Loading...']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default card;","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/cards.tsx"],"names":["React","Component","DeviceApi","UserApi","Configuration","card","device","name","DataTable","constructor","props","state","items","getDevicesAndPoints","config","userApi","deviceApi","token","userLogin","username","password","accessToken","id","userId","console","error","alert","allDevices","userPrototypeGetDevices","JSON","stringify","where","lastConnection","gt","Date","points","devicePrototypeGetPoints","timestamp","between","locationType","neq","order","pointsItems","forEach","point","date","push","toString","location","lat","lng","currentUsed","setState","e","componentDidMount","then","render","log","length"],"mappings":"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","sourcesContent":["/* \nfile: cards.tsx \n    file for the individual tracker pages\n    will need to implement csv or excel export here\n    will need to change the datatable component into an actual table \n        - currently is a listing of data\n*/\n\nimport React, {Component} from 'react'\nimport {DeviceApi, UserApi} from \"./lb-api\";\nimport {Configuration} from \"./lb-api/configuration\";\n\n// card function to display device name and datatable\nfunction card(device) {\n    \n    return (\n        <div>\n            <h1>This is device {device.name}</h1> \n            <DataTable />\n        </div>\n    )\n}\n\n// DataTable Component \nexport class DataTable extends Component<{}> {\n    constructor(props) {\n        super(props);\n        this.state = { items: [] };\n    }\n\n    // get the devices and points\n    async getDevicesAndPoints() {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            const deviceApi = new DeviceApi(config);\n            try {\n                let token = await userApi.userLogin({username: \"jpalad3@gatech.edu\", password: \"EagleScouts4Life!\"});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let allDevices = await userApi.userPrototypeGetDevices(config.userId,\n                JSON.stringify({where: {lastConnection : {gt: +new Date() - 7 * 24 * 3600 * 1000} }})\n            );\n\n            const items: any[] = [];\n            for (const device of allDevices) {\n                if (!device.id) continue; // prevent error on next line\n                let points = await deviceApi.devicePrototypeGetPoints(device.id,\n                    JSON.stringify({// filter needs to be a JSON encoded string\n                        //Optional query filters\n                        where: {\n                            timestamp: {between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]},\n                            //alternatively using greater than operator (gt):\n                            //timestamp: {gt: +new Date() - 7 * 24 * 3600 * 1000},\n                            locationType: {neq: 'invalid'}\n                        },\n                        order: 'timestamp DESC', // order by newest points first\n                    }));\n\n                const pointsItems: any[] = [];\n                points.forEach(point => {\n                    var date = new Date(point.timestamp);\n                    pointsItems.push(\n                        <div key={point.id} className=\"point\">\n                            <b>{date.toString()}</b> - ({point.location?.lat}, {point.location?.lng}) - {point.currentUsed}\n                        </div>\n                    )\n                });\n\n                items.push(\n                    <div key={device.id} className=\"device-info\">\n                        {pointsItems}\n                    </div>\n                )\n            }\n\n            this.setState({items});\n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    componentDidMount() {\n        this.getDevicesAndPoints().then();\n    }\n\n\n    render() {\n        console.log(this.props);\n        return (\n            <div className=\"App\">\n                <h3>Data</h3>\n                {(this.state as any).items?.length ? (this.state as any).items : 'Loading...'}\n            </div>\n        );\n    }\n}\n\nexport default card\n"]},"metadata":{},"sourceType":"module"}
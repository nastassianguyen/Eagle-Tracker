{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nastassianguyen/Desktop/proj/EagleTracker/src/cards.tsx\",\n    _s = $RefreshSig$();\n\n/* \nfile: cards.tsx \n    file for the individual tracker pages\n    will need to implement csv or excel export here\n    will need to change the datatable component into an actual table \n        - currently is a listing of data\n*/\nimport React, { useEffect } from 'react';\nimport { DeviceApi, UserApi } from \"./lb-api\";\nimport { Configuration } from \"./lb-api/configuration\";\nimport Map from './Map'; // Table Creation\n\nimport { DataGrid } from '@material-ui/data-grid';\nimport { format } from 'date-fns';\nimport Geocode from \"react-geocode\"; // Excel \n\nimport ReactExport from \"react-export-excel\";\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\nvar deviceIDEX; //to have device name in excel sheet\n//variables for determining data points\n\nvar numberPulls = 50;\n\n// card function to display device name and datatable\nfunction Card(device) {\n  _s();\n\n  const [tableItems, setTableItems] = React.useState([]);\n  const [center, setCenter] = React.useState({\n    // state to re-render\n    lat: 0,\n    lng: 0\n  });\n  const [points, setPoints] = React.useState([]);\n  useEffect(() => {\n    getPoints();\n  }, []); // for reverse geocoding to get city/state/country\n\n  Geocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY); // function for getting the city/state/country \n\n  const getCityState = async point => {\n    let city = \"\",\n        state = \"\",\n        country = \"\";\n    const response = await Geocode.fromLatLng(String(point.lat), String(point.lng));\n    let parts = response.results[0].address_components;\n    parts.forEach(part => {\n      if (part.types.includes(\"locality\")) {\n        city = part.long_name;\n      } else if (part.types.includes(\"administrative_area_level_1\")) {\n        state = part.long_name;\n      } else if (part.types.includes(\"country\")) {\n        country = part.long_name;\n      } else {// do nothing\n      }\n    });\n    return [city, state, country];\n  }; // get the devices and points\n\n\n  const getPoints = async () => {\n    try {\n      const config = new Configuration();\n      const userApi = new UserApi(config);\n      const deviceApi = new DeviceApi(config);\n\n      try {\n        let token = await userApi.userLogin({\n          username: process.env.REACT_APP_LIGHTBUG_API_USERNAME,\n          password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD\n        });\n        config.accessToken = token.id;\n        config.userId = `${token.userId}`;\n      } catch {\n        console.error('Login Failed');\n        alert('Login Fail');\n        return;\n      }\n\n      let items = [];\n      const locations = [];\n      let points = await deviceApi.devicePrototypeGetPoints(device.id, JSON.stringify({\n        where: {\n          timestamp: {\n            between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]\n          },\n          locationType: {\n            neq: 'invalid'\n          }\n        },\n        order: 'timestamp DESC',\n        // order by newest points first\n        limit: numberPulls\n      })); // Where data gets individually sorted\n\n      deviceIDEX = device.name;\n\n      for (const point of points) {\n        var _point$location, _point$location2, _points$0$location, _points$0$location2;\n\n        // ---Bruteforce way, push all data points into a single 1-d array---\n        items.push(format(new Date(point.timestamp), 'Pp'));\n        items.push((_point$location = point.location) === null || _point$location === void 0 ? void 0 : _point$location.lat);\n        items.push((_point$location2 = point.location) === null || _point$location2 === void 0 ? void 0 : _point$location2.lng);\n        items.push(point.altitude);\n        items.push(point.batteryVoltage); // getting city/state/location\n\n        let where = await getCityState(point.location); // push to array\n\n        locations.push({\n          name: device.name,\n          id: device.id,\n          lat: (_points$0$location = points[0].location) === null || _points$0$location === void 0 ? void 0 : _points$0$location.lat,\n          lng: (_points$0$location2 = points[0].location) === null || _points$0$location2 === void 0 ? void 0 : _points$0$location2.lng,\n          time: points[0].timestamp,\n          city: where[0],\n          state: where[1],\n          country: where[2]\n        });\n      }\n\n      setTableItems(items);\n      setPoints(locations);\n      let lat_sum = 0;\n      let lng_sum = 0;\n\n      for (const item of locations) {\n        lat_sum += item.lat;\n        lng_sum += item.lng;\n      }\n\n      const new_center = {\n        lat: lat_sum / locations.length,\n        lng: lng_sum / locations.length\n      };\n      setCenter(new_center);\n    } catch (e) {\n      console.error(\"Failed to get data\", e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card fluid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: device.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section double-padded\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card fluid\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"section\",\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Device Information\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"section\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Battery Life:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card fluid\",\n              children: /*#__PURE__*/_jsxDEV(Map, {\n                devices: points,\n                center: center,\n                displayAll: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-7\",\n            children: /*#__PURE__*/_jsxDEV(DataTable, {\n              tableItems: tableItems\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n} // DataTable Component \n\n\n_s(Card, \"WvOWI0oVd+Kr071MJAk+v349lx4=\");\n\n_c = Card;\n\nconst DataTable = ({\n  tableItems\n}) => {\n  //uniqueData needs to be equal to number of unique data points wanted\n  //e.g. if getting date,latitude and longatude then uniqueData = 3;\n  var uniqueData = 5;\n  let rows = [];\n  let idCount = 0;\n\n  for (var i = 0; i < numberPulls * uniqueData; i += uniqueData) {\n    //sets rows for table\n    rows.push({\n      id: idCount,\n      col1: tableItems[i],\n      col2: tableItems[i + 1],\n      col3: tableItems[i + 2],\n      col4: tableItems[i + 3],\n      col5: tableItems[i + 4]\n    });\n    idCount++;\n  }\n\n  let columns = [//sets columns for table\n  {\n    field: 'col1',\n    headerName: 'Date',\n    width: 300\n  }, {\n    field: 'col2',\n    headerName: 'Latitude',\n    width: 150\n  }, {\n    field: 'col3',\n    headerName: 'Longitude',\n    width: 150\n  }, {\n    field: 'col4',\n    headerName: 'Altitude (Meters)',\n    width: 150,\n    hide: true\n  }, {\n    field: 'col5',\n    headerName: 'Voltage (Volts)',\n    width: 150,\n    hide: true\n  }];\n  return (\n    /*#__PURE__*/\n    //Putting Data into Table\n    _jsxDEV(\"div\", {\n      style: {\n        height: 900,\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(ExcelFile, {\n        element: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Download Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 29\n        }, this),\n        filename: \"Eagle Data\",\n        children: /*#__PURE__*/_jsxDEV(ExcelSheet, {\n          data: rows,\n          name: deviceIDEX,\n          children: [/*#__PURE__*/_jsxDEV(ExcelColumn, {\n            label: \"Date\",\n            value: \"col1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ExcelColumn, {\n            label: \"Latitude\",\n            value: \"col2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ExcelColumn, {\n            label: \"Longitude\",\n            value: \"col3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ExcelColumn, {\n            label: \"Altitude(Meters)\",\n            value: \"col4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ExcelColumn, {\n            label: \"Voltage(Volts\",\n            value: \"col5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: rows,\n        columns: columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_c2 = DataTable;\nexport default Card;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"DataTable\");","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/cards.tsx"],"names":["React","useEffect","DeviceApi","UserApi","Configuration","Map","DataGrid","format","Geocode","ReactExport","ExcelFile","ExcelSheet","ExcelColumn","deviceIDEX","numberPulls","Card","device","tableItems","setTableItems","useState","center","setCenter","lat","lng","points","setPoints","getPoints","setApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","getCityState","point","city","state","country","response","fromLatLng","String","parts","results","address_components","forEach","part","types","includes","long_name","config","userApi","deviceApi","token","userLogin","username","REACT_APP_LIGHTBUG_API_USERNAME","password","REACT_APP_LIGHTBUG_API_PASSWORD","accessToken","id","userId","console","error","alert","items","locations","devicePrototypeGetPoints","JSON","stringify","where","timestamp","between","Date","locationType","neq","order","limit","name","push","location","altitude","batteryVoltage","time","lat_sum","lng_sum","item","new_center","length","e","DataTable","uniqueData","rows","idCount","i","col1","col2","col3","col4","col5","columns","field","headerName","width","hide","height"],"mappings":"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","sourcesContent":["/* \nfile: cards.tsx \n    file for the individual tracker pages\n    will need to implement csv or excel export here\n    will need to change the datatable component into an actual table \n        - currently is a listing of data\n*/\n\nimport React, {useEffect} from 'react'\nimport {DeviceApi, UserApi} from \"./lb-api\";\nimport {Configuration} from \"./lb-api/configuration\";\nimport Map from './Map';\n\n// Table Creation\nimport { DataGrid, GridRowsProp, GridColDef } from '@material-ui/data-grid';\nimport { format } from 'date-fns'\nimport Geocode from \"react-geocode\";\n\n\n// Excel \nimport ReactExport from \"react-export-excel\";\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\nvar deviceIDEX; //to have device name in excel sheet\n\n//variables for determining data points\nvar numberPulls = 50;\n\ninterface Props {\n    tableItems: any[];\n}\n\ninterface Device {\n    name: string;\n    id: number;\n    lat: number;\n    lng: number;\n    time: Date;\n    city: string;\n    state: string;\n    country: string;\n}\n\n// card function to display device name and datatable\nfunction Card(device) {\n\n    const [tableItems, setTableItems] = React.useState<any[]>([]);\n\n    const [center, setCenter] = React.useState({ // state to re-render\n        lat: 0,\n        lng: 0,\n    });\n    \n    const [points, setPoints] = React.useState<Device[]>([]);\n\n    useEffect(() => {\n        getPoints();\n    }, []);\n\n    // for reverse geocoding to get city/state/country\n    Geocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n\n    // function for getting the city/state/country \n    const getCityState = async (point) => {\n        let city = \"\", state = \"\", country = \"\";\n        const response = await Geocode.fromLatLng(String(point.lat), String(point.lng));\n        let parts = response.results[0].address_components;\n        parts.forEach(part => {\n            if (part.types.includes(\"locality\")) {\n                city = part.long_name;\n            } else if (part.types.includes(\"administrative_area_level_1\")) {\n                state = part.long_name;\n            } else if (part.types.includes(\"country\")) {\n                country = part.long_name;\n            } else {\n                // do nothing\n            }\n        })\n        return [city, state, country];\n    }\n\n    // get the devices and points\n    const getPoints = async () => {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            const deviceApi = new DeviceApi(config);\n            try {\n                let token = await userApi.userLogin({username: process.env.REACT_APP_LIGHTBUG_API_USERNAME, password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let items: any[] = [];\n            const locations: any[] = [];\n            let points = await deviceApi.devicePrototypeGetPoints(device.id,\n                JSON.stringify({\n                    where: {\n                        timestamp: {between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]},\n                        locationType: {neq: 'invalid'}\n                    },\n                    order: 'timestamp DESC', // order by newest points first\n                    limit: numberPulls,\n                }));\n            \n            // Where data gets individually sorted\n            deviceIDEX = device.name;\n\n            for (const point of points) {\n                // ---Bruteforce way, push all data points into a single 1-d array---\n                items.push(format(new Date(point.timestamp), 'Pp'));\n                items.push(point.location?.lat);\n                items.push(point.location?.lng);\n                items.push(point.altitude);\n                items.push(point.batteryVoltage);\n\n                // getting city/state/location\n                let where = await getCityState(point.location);\n\n                // push to array\n                locations.push(\n                    {\n                        name: device.name,\n                        id: device.id,\n                        lat: points[0].location?.lat,\n                        lng: points[0].location?.lng,\n                        time: points[0].timestamp,\n                        city: where[0],\n                        state: where[1],\n                        country: where[2],\n                    }\n                )\n            }\n            setTableItems(items);\n            setPoints(locations);\n\n            let lat_sum = 0;\n            let lng_sum = 0;\n            for (const item of locations) {\n                lat_sum += item.lat; \n                lng_sum += item.lng;\n            }\n            const new_center = {\n                lat: lat_sum / locations.length,\n                lng: lng_sum / locations.length\n            };\n            setCenter(new_center);\n\n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    return (\n        <div className=\"card fluid\">\n            <div className=\"section\"> \n                <h1>{device.name}</h1> \n            </div>\n                <div className=\"section double-padded\">\n                    <div className=\"container\">\n                        <div className=\"row\"> \n                        <div className=\"col-sm-5\">\n                                <div className=\"card fluid\"> \n                                    <div className=\"section\"> \n                                        <h4>Device Information</h4>\n                                    </div>\n                                    <div className=\"section\"> \n                                        <p>Battery Life:</p>\n                                    </div>\n                                </div>\n                                <div className=\"card fluid\"> \n                                    <Map devices={points} center={center} displayAll={false} />\n                                </div>\n                            </div>\n                            <div className=\"col-sm-7\">\n                                <DataTable tableItems={tableItems}/>\n                            </div>\n                        </div>\n                    </div>\n            </div>\n        </div> \n    )\n}\n\n// DataTable Component \nconst DataTable: React.FC<Props> = ({tableItems})  => {   \n    //uniqueData needs to be equal to number of unique data points wanted\n    //e.g. if getting date,latitude and longatude then uniqueData = 3;\n    var uniqueData = 5;\n\n    let rows: GridRowsProp = [];\n    let idCount = 0;\n    for (var i = 0; i < (numberPulls * uniqueData); i += uniqueData) { //sets rows for table\n        rows.push(\n            {   id: idCount,\n                col1: tableItems[i],\n                col2: tableItems[i+1], \n                col3: tableItems[i+2],\n                col4: tableItems[i+3],\n                col5: tableItems[i+4]\n            }\n        )\n        idCount++;\n    }\n    let columns = [ //sets columns for table\n        {field: 'col1', headerName: 'Date', width: 300 }, \n        {field: 'col2', headerName: 'Latitude', width: 150},\n        {field: 'col3', headerName: 'Longitude', width: 150,},\n        {field: 'col4', headerName: 'Altitude (Meters)', width: 150, hide: true},\n        {field: 'col5', headerName: 'Voltage (Volts)', width: 150, hide: true}\n        ];\n\n    return (\n        //Putting Data into Table\n        <div style={{ height: 900, width: '100%' }}>\n        <ExcelFile element={<button>Download Data</button>}filename={\"Eagle Data\"}>\n            <ExcelSheet data={rows} name={deviceIDEX}>\n                <ExcelColumn label=\"Date\" value={\"col1\"}/>\n                <ExcelColumn label=\"Latitude\" value={\"col2\"}/>\n                <ExcelColumn label=\"Longitude\" value={\"col3\"}/>\n                <ExcelColumn label=\"Altitude(Meters)\" value={\"col4\"}/>\n                <ExcelColumn label=\"Voltage(Volts\" value={\"col5\"}/>\n            </ExcelSheet>\n        </ExcelFile>\n        <DataGrid rows={rows} columns={columns}/>\n        </div>\n    );\n}\n\nexport default Card"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nastassianguyen/Desktop/proj/EagleTracker/src/Dashboard.tsx\";\n\n/* \nfile: Dashboard.tsx \n    file for the dashboard display of the devices\n*/\nimport React, { Component } from 'react';\nimport './App.css';\nimport { UserApi } from \"./lb-api\";\nimport { Configuration } from \"./lb-api/configuration\";\nexport class Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n    };\n  } // get list of devices in an array \n\n\n  async getDevices() {\n    try {\n      const config = new Configuration();\n      const userApi = new UserApi(config);\n\n      try {\n        let token = await userApi.userLogin({\n          username: \"jpalad3@gatech.edu\",\n          password: \"EagleScouts4Life!\"\n        });\n        config.accessToken = token.id;\n        config.userId = `${token.userId}`;\n      } catch {\n        console.error('Login Failed');\n        alert('Login Fail');\n        return;\n      }\n\n      let allDevices = await userApi.userPrototypeGetDevices(config.userId, JSON.stringify({\n        where: {\n          lastConnection: {\n            gt: +new Date() - 7 * 24 * 3600 * 1000\n          }\n        }\n      }));\n      const items = [];\n\n      for (const device of allDevices) {\n        if (!device.id) continue; // prevent error on next line\n        // push html element of links (that look like buttons) to array\n\n        items.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"device-info\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            className: \"device\",\n            href: `/devices/${device.id}`,\n            children: [\"Device \", device.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)\n        }, device.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this));\n      }\n\n      this.setState({\n        items\n      });\n    } catch (e) {\n      console.error(\"Failed to get data\", e);\n    }\n  } // return promist after component mounts to DOM\n\n\n  componentDidMount() {\n    this.getDevices().then();\n  } // render function - displays listing of devices as links \n\n\n  render() {\n    var _items;\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Eagle Tracker Database\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), ((_items = this.state.items) === null || _items === void 0 ? void 0 : _items.length) ? this.state.items : 'Loading...']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default Dashboard;","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/Dashboard.tsx"],"names":["React","Component","UserApi","Configuration","Dashboard","constructor","props","state","items","getDevices","config","userApi","token","userLogin","username","password","accessToken","id","userId","console","error","alert","allDevices","userPrototypeGetDevices","JSON","stringify","where","lastConnection","gt","Date","device","push","name","setState","e","componentDidMount","then","render","length"],"mappings":";;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,WAAP;AACA,SAAQC,OAAR,QAAsB,UAAtB;AACA,SAAQC,aAAR,QAA4B,wBAA5B;AAEA,OAAO,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AACrCI,EAAAA,WAAW,CAACC,KAAD,EAAY;AACnB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAb;AACH,GAJoC,CAMrC;;;AACA,QAAMC,UAAN,GAAmB;AACf,QAAI;AACA,YAAMC,MAAM,GAAG,IAAIP,aAAJ,EAAf;AACA,YAAMQ,OAAO,GAAG,IAAIT,OAAJ,CAAYQ,MAAZ,CAAhB;;AACA,UAAI;AACA,YAAIE,KAAK,GAAG,MAAMD,OAAO,CAACE,SAAR,CAAkB;AAACC,UAAAA,QAAQ,EAAE,oBAAX;AAAiCC,UAAAA,QAAQ,EAAE;AAA3C,SAAlB,CAAlB;AACAL,QAAAA,MAAM,CAACM,WAAP,GAAqBJ,KAAK,CAACK,EAA3B;AACAP,QAAAA,MAAM,CAACQ,MAAP,GAAiB,GAAEN,KAAK,CAACM,MAAO,EAAhC;AAEH,OALD,CAKE,MAAM;AACJC,QAAAA,OAAO,CAACC,KAAR,CAAc,cAAd;AACAC,QAAAA,KAAK,CAAC,YAAD,CAAL;AACA;AACH;;AAED,UAAIC,UAAU,GAAG,MAAMX,OAAO,CAACY,uBAAR,CAAgCb,MAAM,CAACQ,MAAvC,EACnBM,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,KAAK,EAAE;AAACC,UAAAA,cAAc,EAAG;AAACC,YAAAA,EAAE,EAAE,CAAC,IAAIC,IAAJ,EAAD,GAAc,IAAI,EAAJ,GAAS,IAAT,GAAgB;AAAnC;AAAlB;AAAR,OAAf,CADmB,CAAvB;AAIA,YAAMrB,KAAY,GAAG,EAArB;;AACA,WAAK,MAAMsB,MAAX,IAAqBR,UAArB,EAAiC;AAC7B,YAAI,CAACQ,MAAM,CAACb,EAAZ,EAAgB,SADa,CACH;AAE1B;;AACAT,QAAAA,KAAK,CAACuB,IAAN,eACI;AAAqB,UAAA,SAAS,EAAC,aAA/B;AAAA,iCACI;AAAG,YAAA,SAAS,EAAC,QAAb;AAAsB,YAAA,IAAI,EAAG,YAAWD,MAAM,CAACb,EAAG,EAAlD;AAAA,kCAA6Da,MAAM,CAACE,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,WAAUF,MAAM,CAACb,EAAjB;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKH;;AAED,WAAKgB,QAAL,CAAc;AAACzB,QAAAA;AAAD,OAAd;AACH,KA/BD,CA+BE,OAAO0B,CAAP,EAAU;AACRf,MAAAA,OAAO,CAACC,KAAR,CAAc,oBAAd,EAAoCc,CAApC;AACH;AACJ,GA1CoC,CA4CrC;;;AACAC,EAAAA,iBAAiB,GAAG;AAChB,SAAK1B,UAAL,GAAkB2B,IAAlB;AACH,GA/CoC,CAiDrC;;;AACAC,EAAAA,MAAM,GAAG;AAAA;;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEK,WAAC,KAAK9B,KAAN,CAAoBC,KAApB,kDAA2B8B,MAA3B,IAAqC,KAAK/B,KAAN,CAAoBC,KAAxD,GAAgE,YAFrE;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAzDoC;AA6DzC,eAAeJ,SAAf","sourcesContent":["/* \nfile: Dashboard.tsx \n    file for the dashboard display of the devices\n*/\n\nimport React, {Component} from 'react';\nimport './App.css';\nimport {UserApi} from \"./lb-api\";\nimport {Configuration} from \"./lb-api/configuration\";\n\nexport class Dashboard extends Component {\n    constructor(props:any) {\n        super(props);\n        this.state = { items: [] };\n    }\n\n    // get list of devices in an array \n    async getDevices() {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            try {\n                let token = await userApi.userLogin({username: \"jpalad3@gatech.edu\", password: \"EagleScouts4Life!\"});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let allDevices = await userApi.userPrototypeGetDevices(config.userId,\n                JSON.stringify({where: {lastConnection : {gt: +new Date() - 7 * 24 * 3600 * 1000} }})\n            );\n\n            const items: any[] = [];\n            for (const device of allDevices) {\n                if (!device.id) continue; // prevent error on next line\n\n                // push html element of links (that look like buttons) to array\n                items.push(\n                    <div key={device.id} className=\"device-info\">\n                        <a className=\"device\" href={`/devices/${device.id}`}>Device {device.name}</a>\n                    </div>\n                )\n            }\n\n            this.setState({items});\n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    // return promist after component mounts to DOM\n    componentDidMount() {\n        this.getDevices().then();\n    }\n\n    // render function - displays listing of devices as links \n    render() {\n        return (\n            <div className=\"Dashboard\">\n                <h1>Eagle Tracker Database</h1>\n                {(this.state as any).items?.length ? (this.state as any).items : 'Loading...'}\n            </div>\n        );\n    }\n\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}
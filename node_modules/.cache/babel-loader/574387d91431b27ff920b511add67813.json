{"ast":null,"code":"import _slicedToArray from\"/Users/nastassianguyen/Desktop/proj/EagleTracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";/* \nfile: Map.tsx \n    file for the map display of the most recent locations of devices\n    will need to implement google maps API in this component \n*/import React from'react';import'./App.css';import{GoogleMap,LoadScript,Marker,InfoWindow}from\"@react-google-maps/api\";import{formatRelative}from\"date-fns\";var mapContainerStyle={width:\"100vw\",height:\"100vh\",align:\"center\",maxWidth:\"100%\",maxHeight:\"100%\"};var options={disableDefaultUI:true,zoomControl:true};// interface for device object\nvar Map=function Map(_ref){var devices=_ref.devices,center=_ref.center,displayAll=_ref.displayAll;var _React$useState=React.useState(null),_React$useState2=_slicedToArray(_React$useState,2),selected=_React$useState2[0],setSelected=_React$useState2[1];// for rendering infowindow\nvar mapRef=React.useRef();// ref to retain state without constant re-renders\nvar onMapLoad=React.useCallback(function(map){mapRef.current=map;},[]);return/*#__PURE__*/_jsx(LoadScript,{googleMapsApiKey:process.env.REACT_APP_GOOGLE_MAPS_API_KEY,children:/*#__PURE__*/_jsxs(GoogleMap,{mapContainerStyle:mapContainerStyle,zoom:8,center:center,options:options,onLoad:onMapLoad,children:[devices.map(function(device){return/*#__PURE__*/_jsx(Marker,{title:device.name,visible:true,clickable:true,position:{lat:device.lat,lng:device.lng},onMouseOver:function onMouseOver(){setSelected(device);}},device.id);}),selected&&/*#__PURE__*/_jsx(InfoWindow,{onCloseClick:function onCloseClick(){setSelected(null);},position:{lat:selected.lat,lng:selected.lng},children:/*#__PURE__*/_jsxs(\"div\",{className:\"card fluid\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"section\",children:/*#__PURE__*/_jsxs(\"h4\",{children:[\"Tracker \",selected.name]})}),/*#__PURE__*/_jsx(\"div\",{className:\"section\",children:displayAll?[/*#__PURE__*/_jsxs(\"p\",{children:[\"Last seen: \",formatRelative(new Date(selected.time),new Date())]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"In \",selected.city,\", \",selected.state,\", \",selected.country]}),/*#__PURE__*/_jsx(\"a\",{className:\"button\",href:\"/devices/\".concat(selected.id),children:\"View more\"})]:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Spotted \",formatRelative(new Date(selected.time),new Date())]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"In \",selected.city,\", \",selected.state,\", \",selected.country]})]})]})})]})});};export default Map;","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/Map.tsx"],"names":["React","GoogleMap","LoadScript","Marker","InfoWindow","formatRelative","mapContainerStyle","width","height","align","maxWidth","maxHeight","options","disableDefaultUI","zoomControl","Map","devices","center","displayAll","useState","selected","setSelected","mapRef","useRef","onMapLoad","useCallback","map","current","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","device","name","lat","lng","id","Date","time","city","state","country"],"mappings":"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","sourcesContent":["/* \nfile: Map.tsx \n    file for the map display of the most recent locations of devices\n    will need to implement google maps API in this component \n*/\n\nimport React from 'react';\nimport './App.css';\nimport {\n    GoogleMap,\n    LoadScript,\n    Marker,\n    InfoWindow,\n} from \"@react-google-maps/api\";\nimport {formatRelative} from \"date-fns\";\n\n\nconst mapContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n    align: \"center\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\",\n};\n\nconst options = {\n    disableDefaultUI: true,\n    zoomControl: true,\n}\n\n// interface for device object\nexport interface Device {\n    name: string;\n    id: number;\n    lat: number;\n    lng: number;\n    time: Date;\n    city: string;\n    state: string;\n    country: string;\n}\n\ninterface Center {\n    lat: number;\n    lng: number;\n}\n\ninterface Props {\n    devices: Device[];\n    center: Center;\n    displayAll: boolean;\n}\n\nconst Map: React.FC<Props> = ({devices, center, displayAll})  => {\n\n    const [selected, setSelected] = React.useState<Device | null>(null); // for rendering infowindow\n\n    const mapRef = React.useRef(); // ref to retain state without constant re-renders\n    const onMapLoad = React.useCallback((map) => {\n        mapRef.current = map;\n    }, []);\n\n    return (\n        <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY!}>\n            <GoogleMap \n                mapContainerStyle={mapContainerStyle} \n                zoom = {8} \n                center = {center}\n                options = {options} \n                onLoad={onMapLoad} > \n                {devices.map((device) => (\n                    <Marker \n                        key={device.id}\n                        title={device.name}\n                        visible={true}\n                        clickable={true}\n                        position={{lat:device.lat, lng: device.lng}}\n                        onMouseOver={() => {\n                            setSelected(device);\n                        }}\n                    />\n                ))}\n\n                {selected && (<InfoWindow\n                \n                    onCloseClick={() => {\n                        setSelected(null);\n                        }}\n                    position={{\n                        lat: selected.lat,\n                        lng: selected.lng\n                    }} > \n                    <div className=\"card fluid\">\n                        <div className=\"section\">\n                            <h4>Tracker {selected.name}</h4>    \n                        </div>\n                        <div className=\"section\">\n                            {\n                                displayAll ? \n                                    [<p>Last seen: {formatRelative(new Date(selected.time), new Date())}</p>,\n                                    <p>In {selected.city}, {selected.state}, {selected.country}</p>,\n                                    <a className=\"button\" href={`/devices/${selected.id}`}>View more</a>] \n                                    : [<p>Spotted {formatRelative(new Date(selected.time), new Date())}</p>,\n                                    <p>In {selected.city}, {selected.state}, {selected.country}</p>]\n                            }\n                            \n                        </div>       \n                    </div>\n                </InfoWindow>)}\n            </GoogleMap>\n        </LoadScript>\n    );\n}\nexport default Map;"]},"metadata":{},"sourceType":"module"}
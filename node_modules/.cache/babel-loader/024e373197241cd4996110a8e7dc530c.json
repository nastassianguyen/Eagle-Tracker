{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/nastassianguyen/Desktop/proj/EagleTracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _regeneratorRuntime from\"/Users/nastassianguyen/Desktop/proj/EagleTracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nastassianguyen/Desktop/proj/EagleTracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/nastassianguyen/Desktop/proj/EagleTracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";/* \nfile: Map.tsx \n    file for the map display of the most recent locations of devices\n    will need to implement google maps API in this component \n*/import React,{useEffect}from'react';import'./App.css';import{DeviceApi,UserApi}from\"./lb-api\";import{Configuration}from\"./lb-api/configuration\";import Geocode from\"react-geocode\";import Map from'./Map';// interface for device object\nexport default function ViewAll(){// react hooks maintaining center, devices, and selected \nvar _React$useState=React.useState({// state to re-render\nlat:0,lng:0}),_React$useState2=_slicedToArray(_React$useState,2),center=_React$useState2[0],setCenter=_React$useState2[1];var _React$useState3=React.useState([]),_React$useState4=_slicedToArray(_React$useState3,2),devices=_React$useState4[0],setDevices=_React$useState4[1];// for hooks \nuseEffect(function(){getDevicesAndPoints();},[]);// for reverse geocoding to get city/state/country\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);// function for getting the city/state/country \nvar getCityState=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(point){var city,state,country,response,parts;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:city=\"\",state=\"\",country=\"\";_context.next=3;return Geocode.fromLatLng(String(point.lat),String(point.lng));case 3:response=_context.sent;parts=response.results[0].address_components;parts.forEach(function(part){if(part.types.includes(\"locality\")){city=part.long_name;}else if(part.types.includes(\"administrative_area_level_1\")){state=part.long_name;}else if(part.types.includes(\"country\")){country=part.long_name;}else{// do nothing\n}});return _context.abrupt(\"return\",[city,state,country]);case 7:case\"end\":return _context.stop();}}},_callee);}));return function getCityState(_x){return _ref.apply(this,arguments);};}();// get the devices and most recent point\nvar getDevicesAndPoints=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var config,userApi,deviceApi,token,allDevices,locations,_iterator,_step,_points$0$location,_points$0$location2,device,points,where,lat_sum,lng_sum,_i,_locations,item,new_center;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;config=new Configuration();userApi=new UserApi(config);deviceApi=new DeviceApi(config);_context2.prev=4;_context2.next=7;return userApi.userLogin({username:process.env.REACT_APP_LIGHTBUG_API_USERNAME,password:process.env.REACT_APP_LIGHTBUG_API_PASSWORD});case 7:token=_context2.sent;config.accessToken=token.id;config.userId=\"\".concat(token.userId);_context2.next=17;break;case 12:_context2.prev=12;_context2.t0=_context2[\"catch\"](4);console.error('Login Failed');alert('Login Fail');return _context2.abrupt(\"return\");case 17:_context2.next=19;return userApi.userPrototypeGetDevices(config.userId,JSON.stringify({where:{lastConnection:{gt:+new Date()-7*24*3600*1000}}}));case 19:allDevices=_context2.sent;locations=[];_iterator=_createForOfIteratorHelper(allDevices);_context2.prev=22;_iterator.s();case 24:if((_step=_iterator.n()).done){_context2.next=37;break;}device=_step.value;if(device.id){_context2.next=28;break;}return _context2.abrupt(\"continue\",35);case 28:_context2.next=30;return deviceApi.devicePrototypeGetPoints(device.id,JSON.stringify({where:{timestamp:{between:[+new Date()-7*24*3600*1000,new Date()]},locationType:{neq:'invalid'}},order:'timestamp DESC',// order by newest points first\nlimit:1}));case 30:points=_context2.sent;_context2.next=33;return getCityState(points[0].location);case 33:where=_context2.sent;// push to array\nlocations.push({name:device.name,id:device.id,lat:(_points$0$location=points[0].location)===null||_points$0$location===void 0?void 0:_points$0$location.lat,lng:(_points$0$location2=points[0].location)===null||_points$0$location2===void 0?void 0:_points$0$location2.lng,time:points[0].timestamp,city:where[0],state:where[1],country:where[2]});case 35:_context2.next=24;break;case 37:_context2.next=42;break;case 39:_context2.prev=39;_context2.t1=_context2[\"catch\"](22);_iterator.e(_context2.t1);case 42:_context2.prev=42;_iterator.f();return _context2.finish(42);case 45:setDevices(locations);// get center of map based on most recent locations\nlat_sum=0;lng_sum=0;for(_i=0,_locations=locations;_i<_locations.length;_i++){item=_locations[_i];lat_sum+=item.lat;lng_sum+=item.lng;}new_center={lat:lat_sum/locations.length,lng:lng_sum/locations.length};setCenter(new_center);_context2.next=56;break;case 53:_context2.prev=53;_context2.t2=_context2[\"catch\"](0);console.error(\"Failed to get data\",_context2.t2);case 56:case\"end\":return _context2.stop();}}},_callee2,null,[[0,53],[4,12],[22,39,42,45]]);}));return function getDevicesAndPoints(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsx(\"span\",{className:\"responsive-margin\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"card fluid\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"section\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"View All\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"section double-padded\",children:/*#__PURE__*/_jsx(Map,{devices:devices,center:center,displayAll:true})})]})});}","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/ViewAll.tsx"],"names":["React","useEffect","DeviceApi","UserApi","Configuration","Geocode","Map","ViewAll","useState","lat","lng","center","setCenter","devices","setDevices","getDevicesAndPoints","setApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","getCityState","point","city","state","country","fromLatLng","String","response","parts","results","address_components","forEach","part","types","includes","long_name","config","userApi","deviceApi","userLogin","username","REACT_APP_LIGHTBUG_API_USERNAME","password","REACT_APP_LIGHTBUG_API_PASSWORD","token","accessToken","id","userId","console","error","alert","userPrototypeGetDevices","JSON","stringify","where","lastConnection","gt","Date","allDevices","locations","device","devicePrototypeGetPoints","timestamp","between","locationType","neq","order","limit","points","location","push","name","time","lat_sum","lng_sum","item","new_center","length"],"mappings":"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","sourcesContent":["/* \nfile: Map.tsx \n    file for the map display of the most recent locations of devices\n    will need to implement google maps API in this component \n*/\n\nimport React, {useEffect} from 'react';\nimport './App.css';\nimport {DeviceApi, UserApi} from \"./lb-api\";\nimport {Configuration} from \"./lb-api/configuration\";\nimport Geocode from \"react-geocode\";\n\nimport Map from './Map';\n\n\n// interface for device object\nexport interface Device {\n    name: string;\n    id: number;\n    lat: number;\n    lng: number;\n    time: Date;\n    city: string;\n    state: string;\n    country: string;\n}\n\nexport default function ViewAll() {\n    // react hooks maintaining center, devices, and selected \n    const [center, setCenter] = React.useState({ // state to re-render\n        lat: 0,\n        lng: 0,\n    });\n    \n    const [devices, setDevices] = React.useState<Device[]>([]);\n\n    // for hooks \n    useEffect(() => {\n        getDevicesAndPoints();\n    }, []);\n\n    // for reverse geocoding to get city/state/country\n    Geocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n\n    // function for getting the city/state/country \n    const getCityState = async (point) => {\n        let city = \"\", state = \"\", country = \"\";\n        const response = await Geocode.fromLatLng(String(point.lat), String(point.lng));\n        let parts = response.results[0].address_components;\n        parts.forEach(part => {\n            if (part.types.includes(\"locality\")) {\n                city = part.long_name;\n            } else if (part.types.includes(\"administrative_area_level_1\")) {\n                state = part.long_name;\n            } else if (part.types.includes(\"country\")) {\n                country = part.long_name;\n            } else {\n                // do nothing\n            }\n        })\n        return [city, state, country];\n    }\n\n    // get the devices and most recent point\n    const getDevicesAndPoints = async () => {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            const deviceApi = new DeviceApi(config);\n            try {\n                let token = await userApi.userLogin({username: process.env.REACT_APP_LIGHTBUG_API_USERNAME, password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let allDevices = await userApi.userPrototypeGetDevices(config.userId,\n                JSON.stringify({where: {lastConnection : {gt: +new Date() - 7 * 24 * 3600 * 1000} }})\n            );\n\n            const locations: any[] = [];\n            for (const device of allDevices) {\n                if (!device.id) continue; // prevent error on next line\n                let points = await deviceApi.devicePrototypeGetPoints(device.id,\n                    JSON.stringify({\n                        where: {\n                            timestamp: {between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]},\n                            locationType: {neq: 'invalid'}\n                        },\n                        order: 'timestamp DESC', // order by newest points first\n                        limit: 1,\n                    }));\n\n                // getting city/state/location\n                let where = await getCityState(points[0].location);\n\n                // push to array\n                locations.push(\n                    {\n                        name: device.name,\n                        id: device.id,\n                        lat: points[0].location?.lat,\n                        lng: points[0].location?.lng,\n                        time: points[0].timestamp,\n                        city: where[0],\n                        state: where[1],\n                        country: where[2],\n                    }\n                )\n                \n            }\n            setDevices(locations);\n            // get center of map based on most recent locations\n            let lat_sum = 0;\n            let lng_sum = 0;\n            for (let item of locations) {\n                lat_sum += item.lat; \n                lng_sum += item.lng;\n            }\n            const new_center = {\n                lat: lat_sum / locations.length,\n                lng: lng_sum / locations.length\n            };\n            setCenter(new_center);\n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    return (\n        <span className= \"responsive-margin\">\n            <div className=\"card fluid\">\n                <div className=\"section\">\n                <h1>View All</h1>\n                </div>\n                <div className=\"section double-padded\">\n                    <Map devices={devices} center={center} displayAll={true} />\n                </div>\n            </div>\n        </span>\n    );\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nastassianguyen/Desktop/proj/EagleTracker/src/App.tsx\";\n\n/* \nfile: App.tsx \n    main file for the navigation between home page and view all\n    displays the 'home' and 'view all' buttons\n    contains router implementation\n*/\nimport React, { Component } from 'react';\nimport './App.css';\nimport { UserApi } from \"./lb-api\";\nimport { Configuration } from \"./lb-api/configuration\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\nimport ViewAll from \"./ViewAll\";\nimport Loading from './components/loading';\nimport Card from './cards';\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderDevices = routerProps => {\n      let deviceID = parseInt(routerProps.match.params.id);\n      let foundDevice = this.state.items.find(device => device.id === deviceID);\n      return foundDevice ? /*#__PURE__*/_jsxDEV(Card, { ...foundDevice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 54\n      }, this);\n    };\n\n    this.state = {\n      items: []\n    };\n  } // get list of devices\n\n\n  async getDevices() {\n    try {\n      const config = new Configuration();\n      const userApi = new UserApi(config);\n\n      try {\n        let token = await userApi.userLogin({\n          username: process.env.REACT_APP_LIGHTBUG_API_USERNAME,\n          password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD\n        });\n        config.accessToken = token.id;\n        config.userId = `${token.userId}`;\n      } catch {\n        console.error('Login Failed');\n        alert('Login Fail');\n        return;\n      }\n\n      let allDevices = await userApi.userPrototypeGetDevices(config.userId, JSON.stringify({\n        where: {\n          lastConnection: {\n            gt: +new Date() - 7 * 24 * 3600 * 1000\n          }\n        }\n      }));\n      const items = [];\n\n      for (const device of allDevices) {\n        if (!device.id) continue; // prevent error on next line\n\n        items.push(device);\n      }\n\n      this.setState({\n        items\n      });\n    } catch (e) {\n      console.error(\"Failed to get data\", e);\n    }\n  } // returns promise after component mounts to DOM\n\n\n  componentDidMount() {\n    this.getDevices().then();\n  } // renderDevices function to display the card component \n\n\n  // render function -- renders out what to display on screen\n  render() {\n    return /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"button\",\n          href: \"/\",\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"button\",\n          href: \"/view-all\",\n          children: \"View All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          component: Dashboard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/devices/:id\",\n          render: routerProps => this.renderDevices(routerProps)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/view-all\",\n          component: ViewAll\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/App.tsx"],"names":["React","Component","UserApi","Configuration","BrowserRouter","Router","Route","Switch","Dashboard","ViewAll","Loading","Card","App","constructor","props","renderDevices","routerProps","deviceID","parseInt","match","params","id","foundDevice","state","items","find","device","getDevices","config","userApi","token","userLogin","username","process","env","REACT_APP_LIGHTBUG_API_USERNAME","password","REACT_APP_LIGHTBUG_API_PASSWORD","accessToken","userId","console","error","alert","allDevices","userPrototypeGetDevices","JSON","stringify","where","lastConnection","gt","Date","push","setState","e","componentDidMount","then","render"],"mappings":"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","sourcesContent":["/* \nfile: App.tsx \n    main file for the navigation between home page and view all\n    displays the 'home' and 'view all' buttons\n    contains router implementation\n*/\n\nimport React, {Component} from 'react';\nimport './App.css';\nimport {UserApi} from \"./lb-api\";\nimport {Configuration} from \"./lb-api/configuration\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\nimport ViewAll from \"./ViewAll\";\nimport Loading from './components/loading';\nimport Card from './cards';\n\nexport class App extends Component<{}, { items : any }> {\n    constructor(props:any) {\n        super(props);\n        this.state = { items: [] };\n    }\n\n    // get list of devices\n    async getDevices() {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            try {\n                let token = await userApi.userLogin({username: process.env.REACT_APP_LIGHTBUG_API_USERNAME, password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let allDevices = await userApi.userPrototypeGetDevices(config.userId,\n                JSON.stringify({where: {lastConnection : {gt: +new Date() - 7 * 24 * 3600 * 1000} }})\n            );\n\n            const items: any[] = [];\n            for (const device of allDevices) {\n                if (!device.id) continue; // prevent error on next line\n                items.push(device)\n            }\n\n            this.setState({items});\n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    // returns promise after component mounts to DOM\n    componentDidMount() {\n        this.getDevices().then();\n    }\n\n    // renderDevices function to display the card component \n    renderDevices = (routerProps) => {\n        let deviceID = parseInt(routerProps.match.params.id);\n        let foundDevice = (this.state as any).items.find(device => device.id === deviceID);\n        return (\n            foundDevice ? <Card {...foundDevice}/> : <Loading/>\n            );\n      }\n\n    // render function -- renders out what to display on screen\n    render() {\n        return (\n            <Router> \n                <header>\n                    <a className=\"button\" href=\"/\">Home</a>\n                    <a className=\"button\" href=\"/view-all\">View All</a>\n                </header>\n                <Switch>\n                        <Route path=\"/\" exact component={Dashboard} />\n                        <Route path = '/devices/:id' render = {routerProps => this.renderDevices(routerProps)} />\n                        <Route path=\"/view-all\"  component={ViewAll} />\n                    </Switch>\n            </Router>\n           );\n    }\n}\n\n  export default App;"]},"metadata":{},"sourceType":"module"}
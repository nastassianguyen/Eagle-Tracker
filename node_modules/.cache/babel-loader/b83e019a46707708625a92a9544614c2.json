{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nastassianguyen/Desktop/proj/EagleTracker/src/App.tsx\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { UserApi } from \"./lb-api\";\nimport { Configuration } from \"./lb-api/configuration\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\nimport Map from \"./Map\";\nimport NotFound from './components/notfound';\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n    };\n  }\n\n  async getDevices() {\n    try {\n      const config = new Configuration();\n      const userApi = new UserApi(config);\n\n      try {\n        let token = await userApi.userLogin({\n          username: \"jpalad3@gatech.edu\",\n          password: \"EagleScouts4Life!\"\n        });\n        config.accessToken = token.id;\n        config.userId = `${token.userId}`;\n      } catch {\n        console.error('Login Failed');\n        alert('Login Fail');\n        return;\n      }\n\n      let allDevices = await userApi.userPrototypeGetDevices(config.userId, JSON.stringify({\n        where: {\n          lastConnection: {\n            gt: +new Date() - 7 * 24 * 3600 * 1000\n          }\n        }\n      }));\n      const items = [];\n\n      for (const device of allDevices) {\n        if (!device.id) continue; // prevent error on next line\n\n        items.push(device);\n      }\n\n      this.setState({\n        items\n      });\n    } catch (e) {\n      console.error(\"Failed to get data\", e);\n    }\n  } // renderDevices = (routerProps) => {\n  //     let deviceID = parseInt(routerProps.match.params.name)\n  //     let foundDevice = this.state.items.find(device => device.name === deviceID)\n  //     return (foundDevice ? <Card device={foundDevice}/> : <NotFound/>)\n  //   }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/\",\n                children: \"Home\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/view-all\",\n                children: \"View All\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            exact: true,\n            component: Dashboard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/view-all\",\n            component: Map\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            component: NotFound\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/App.tsx"],"names":["React","Component","UserApi","Configuration","BrowserRouter","Router","Route","Link","Switch","Dashboard","Map","NotFound","App","constructor","props","state","items","getDevices","config","userApi","token","userLogin","username","password","accessToken","id","userId","console","error","alert","allDevices","userPrototypeGetDevices","JSON","stringify","where","lastConnection","gt","Date","device","push","setState","e","render"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport './App.css';\nimport {DeviceApi, UserApi} from \"./lb-api\";\nimport {Configuration} from \"./lb-api/configuration\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\nimport Map from \"./Map\";\nimport history from './history';\nimport NotFound from './components/notfound';\nimport Card from './components/cards';\n\nexport class App extends Component<{}, { items : any }> {\n    constructor(props:any) {\n        super(props);\n        this.state = { items: [] };\n    }\n\n    async getDevices() {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            try {\n                let token = await userApi.userLogin({username: \"jpalad3@gatech.edu\", password: \"EagleScouts4Life!\"});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let allDevices = await userApi.userPrototypeGetDevices(config.userId,\n                JSON.stringify({where: {lastConnection : {gt: +new Date() - 7 * 24 * 3600 * 1000} }})\n            );\n\n            const items: any[] = [];\n            for (const device of allDevices) {\n                if (!device.id) continue; // prevent error on next line\n                items.push(device)\n            }\n\n            this.setState({items});\n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    // renderDevices = (routerProps) => {\n    //     let deviceID = parseInt(routerProps.match.params.name)\n    //     let foundDevice = this.state.items.find(device => device.name === deviceID)\n    //     return (foundDevice ? <Card device={foundDevice}/> : <NotFound/>)\n    //   }\n\n    render() {\n        return (\n            <Router>\n                <main>\n                    <nav>\n                        <ul>\n                        <li><Link to=\"/\">Home</Link></li>\n                        <li><Link to=\"/view-all\">View All</Link></li>\n                        </ul>\n                    </nav>\n                    <Switch>\n                        <Route path=\"/\" exact component={Dashboard} />\n                        {/* <Route path = '/:name' render = {routerProps => this.renderDevices(routerProps)} /> */}\n                        <Route path=\"/view-all\"  component={Map} />\n                        <Route component = {NotFound} />\n                    </Switch>\n                </main>\n            </Router>\n           );\n    }\n}\n\n  export default App;"]},"metadata":{},"sourceType":"module"}
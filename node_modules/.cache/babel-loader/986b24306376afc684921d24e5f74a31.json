{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/nastassianguyen/Desktop/proj/EagleTracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _regeneratorRuntime from\"/Users/nastassianguyen/Desktop/proj/EagleTracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nastassianguyen/Desktop/proj/EagleTracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/nastassianguyen/Desktop/proj/EagleTracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";/* \nfile: cards.tsx \n    file for the individual tracker pages\n    will need to implement csv or excel export here\n    will need to change the datatable component into an actual table \n        - currently is a listing of data\n*/import React,{useEffect}from'react';import{DeviceApi,UserApi}from\"./lb-api\";import{Configuration}from\"./lb-api/configuration\";import Map from'./Map';// Table Creation\nimport{DataGrid}from'@material-ui/data-grid';import{format}from'date-fns';import Geocode from\"react-geocode\";// Excel \nimport ReactExport from\"react-export-excel\";var ExcelFile=ReactExport.ExcelFile;var ExcelSheet=ReactExport.ExcelFile.ExcelSheet;var ExcelColumn=ReactExport.ExcelFile.ExcelColumn;var deviceIDEX;//to have device name in excel sheet\n//variables for determining data points\nvar numberPulls=50;// card function to display device name and datatable\nfunction Card(device){var _React$useState=React.useState([]),_React$useState2=_slicedToArray(_React$useState,2),tableItems=_React$useState2[0],setTableItems=_React$useState2[1];var _React$useState3=React.useState({// state to re-render\nlat:0,lng:0}),_React$useState4=_slicedToArray(_React$useState3,2),center=_React$useState4[0],setCenter=_React$useState4[1];var _React$useState5=React.useState([]),_React$useState6=_slicedToArray(_React$useState5,2),points=_React$useState6[0],setPoints=_React$useState6[1];useEffect(function(){getPoints();},[]);// for reverse geocoding to get city/state/country\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);// function for getting the city/state/country \nvar getCityState=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(point){var city,state,country,response,parts;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:city=\"\",state=\"\",country=\"\";_context.next=3;return Geocode.fromLatLng(String(point.lat),String(point.lng));case 3:response=_context.sent;parts=response.results[0].address_components;parts.forEach(function(part){if(part.types.includes(\"locality\")){city=part.long_name;}else if(part.types.includes(\"administrative_area_level_1\")){state=part.long_name;}else if(part.types.includes(\"country\")){country=part.long_name;}else{// do nothing\n}});return _context.abrupt(\"return\",[city,state,country]);case 7:case\"end\":return _context.stop();}}},_callee);}));return function getCityState(_x){return _ref.apply(this,arguments);};}();// get the devices and points\nvar getPoints=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var config,userApi,deviceApi,token,items,locations,_points,_iterator,_step,_point$location,_point$location2,_points$0$location,_points$0$location2,point,where,lat_sum,lng_sum,_i,_locations,item,new_center;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;config=new Configuration();userApi=new UserApi(config);deviceApi=new DeviceApi(config);_context2.prev=4;_context2.next=7;return userApi.userLogin({username:process.env.REACT_APP_LIGHTBUG_API_USERNAME,password:process.env.REACT_APP_LIGHTBUG_API_PASSWORD});case 7:token=_context2.sent;config.accessToken=token.id;config.userId=\"\".concat(token.userId);_context2.next=17;break;case 12:_context2.prev=12;_context2.t0=_context2[\"catch\"](4);console.error('Login Failed');alert('Login Fail');return _context2.abrupt(\"return\");case 17:items=[];locations=[];_context2.next=21;return deviceApi.devicePrototypeGetPoints(device.id,JSON.stringify({where:{timestamp:{between:[+new Date()-7*24*3600*1000,new Date()]},locationType:{neq:'invalid'}},order:'timestamp DESC',// order by newest points first\nlimit:numberPulls}));case 21:_points=_context2.sent;// Where data gets individually sorted\ndeviceIDEX=device.name;_iterator=_createForOfIteratorHelper(_points);_context2.prev=24;_iterator.s();case 26:if((_step=_iterator.n()).done){_context2.next=39;break;}point=_step.value;// ---Bruteforce way, push all data points into a single 1-d array---\nitems.push(format(new Date(point.timestamp),'Pp'));items.push((_point$location=point.location)===null||_point$location===void 0?void 0:_point$location.lat);items.push((_point$location2=point.location)===null||_point$location2===void 0?void 0:_point$location2.lng);items.push(point.altitude);items.push(point.batteryVoltage);// getting city/state/location\n_context2.next=35;return getCityState(point.location);case 35:where=_context2.sent;// push to array\nlocations.push({name:device.name,id:device.id,lat:(_points$0$location=_points[0].location)===null||_points$0$location===void 0?void 0:_points$0$location.lat,lng:(_points$0$location2=_points[0].location)===null||_points$0$location2===void 0?void 0:_points$0$location2.lng,time:_points[0].timestamp,city:where[0],state:where[1],country:where[2]});case 37:_context2.next=26;break;case 39:_context2.next=44;break;case 41:_context2.prev=41;_context2.t1=_context2[\"catch\"](24);_iterator.e(_context2.t1);case 44:_context2.prev=44;_iterator.f();return _context2.finish(44);case 47:setTableItems(items);setPoints(locations);lat_sum=0;lng_sum=0;for(_i=0,_locations=locations;_i<_locations.length;_i++){item=_locations[_i];lat_sum+=item.lat;lng_sum+=item.lng;}new_center={lat:lat_sum/locations.length,lng:lng_sum/locations.length};setCenter(new_center);_context2.next=59;break;case 56:_context2.prev=56;_context2.t2=_context2[\"catch\"](0);console.error(\"Failed to get data\",_context2.t2);case 59:case\"end\":return _context2.stop();}}},_callee2,null,[[0,56],[4,12],[24,41,44,47]]);}));return function getPoints(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"card fluid\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"section\",children:/*#__PURE__*/_jsx(\"h1\",{children:device.name})}),/*#__PURE__*/_jsx(\"div\",{className:\"section double-padded\",children:/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col-sm-5\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"card fluid\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"section\",children:/*#__PURE__*/_jsx(\"h4\",{children:\"Device Information\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"section\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Battery Life:\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"card fluid\",children:/*#__PURE__*/_jsx(Map,{devices:points,center:center,displayAll:false})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"col-sm-7\",children:/*#__PURE__*/_jsx(DataTable,{tableItems:tableItems})})]})})})]});}// DataTable Component \nvar DataTable=function DataTable(_ref3){var tableItems=_ref3.tableItems;//uniqueData needs to be equal to number of unique data points wanted\n//e.g. if getting date,latitude and longatude then uniqueData = 3;\nvar uniqueData=5;var rows=[];var idCount=0;for(var i=0;i<numberPulls*uniqueData;i+=uniqueData){//sets rows for table\nrows.push({id:idCount,col1:tableItems[i],col2:tableItems[i+1],col3:tableItems[i+2],col4:tableItems[i+3],col5:tableItems[i+4]});idCount++;}var columns=[//sets columns for table\n{field:'col1',headerName:'Date',width:300},{field:'col2',headerName:'Latitude',width:150},{field:'col3',headerName:'Longitude',width:150},{field:'col4',headerName:'Altitude (Meters)',width:150,hide:true},{field:'col5',headerName:'Voltage (Volts)',width:150,hide:true}];return/*#__PURE__*/ (//Putting Data into Table\n_jsxs(\"div\",{style:{height:900,width:'100%'},children:[/*#__PURE__*/_jsx(ExcelFile,{element:/*#__PURE__*/_jsx(\"button\",{children:\"Download Data\"}),filename:\"Eagle Data\",children:/*#__PURE__*/_jsxs(ExcelSheet,{data:rows,name:deviceIDEX,children:[/*#__PURE__*/_jsx(ExcelColumn,{label:\"Date\",value:\"col1\"}),/*#__PURE__*/_jsx(ExcelColumn,{label:\"Latitude\",value:\"col2\"}),/*#__PURE__*/_jsx(ExcelColumn,{label:\"Longitude\",value:\"col3\"}),/*#__PURE__*/_jsx(ExcelColumn,{label:\"Altitude(Meters)\",value:\"col4\"}),/*#__PURE__*/_jsx(ExcelColumn,{label:\"Voltage(Volts\",value:\"col5\"})]})}),/*#__PURE__*/_jsx(DataGrid,{rows:rows,columns:columns})]}));};export default Card;","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/cards.tsx"],"names":["React","useEffect","DeviceApi","UserApi","Configuration","Map","DataGrid","format","Geocode","ReactExport","ExcelFile","ExcelSheet","ExcelColumn","deviceIDEX","numberPulls","Card","device","useState","tableItems","setTableItems","lat","lng","center","setCenter","points","setPoints","getPoints","setApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","getCityState","point","city","state","country","fromLatLng","String","response","parts","results","address_components","forEach","part","types","includes","long_name","config","userApi","deviceApi","userLogin","username","REACT_APP_LIGHTBUG_API_USERNAME","password","REACT_APP_LIGHTBUG_API_PASSWORD","token","accessToken","id","userId","console","error","alert","items","locations","devicePrototypeGetPoints","JSON","stringify","where","timestamp","between","Date","locationType","neq","order","limit","name","push","location","altitude","batteryVoltage","time","lat_sum","lng_sum","item","new_center","length","DataTable","uniqueData","rows","idCount","i","col1","col2","col3","col4","col5","columns","field","headerName","width","hide","height"],"mappings":"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","sourcesContent":["/* \nfile: cards.tsx \n    file for the individual tracker pages\n    will need to implement csv or excel export here\n    will need to change the datatable component into an actual table \n        - currently is a listing of data\n*/\n\nimport React, {useEffect} from 'react'\nimport {DeviceApi, UserApi} from \"./lb-api\";\nimport {Configuration} from \"./lb-api/configuration\";\nimport Map from './Map';\n\n// Table Creation\nimport { DataGrid, GridRowsProp } from '@material-ui/data-grid';\nimport { format } from 'date-fns'\nimport Geocode from \"react-geocode\";\n\n\n// Excel \nimport ReactExport from \"react-export-excel\";\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\nvar deviceIDEX; //to have device name in excel sheet\n\n//variables for determining data points\nvar numberPulls = 50;\n\ninterface Props {\n    tableItems: any[];\n}\n\ninterface Device {\n    name: string;\n    id: number;\n    lat: number;\n    lng: number;\n    time: Date;\n    city: string;\n    state: string;\n    country: string;\n}\n\n// card function to display device name and datatable\nfunction Card(device) {\n\n    const [tableItems, setTableItems] = React.useState<any[]>([]);\n\n    const [center, setCenter] = React.useState({ // state to re-render\n        lat: 0,\n        lng: 0,\n    });\n    \n    const [points, setPoints] = React.useState<Device[]>([]);\n\n    useEffect(() => {\n        getPoints();\n    }, []);\n\n    // for reverse geocoding to get city/state/country\n    Geocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n\n    // function for getting the city/state/country \n    const getCityState = async (point) => {\n        let city = \"\", state = \"\", country = \"\";\n        const response = await Geocode.fromLatLng(String(point.lat), String(point.lng));\n        let parts = response.results[0].address_components;\n        parts.forEach(part => {\n            if (part.types.includes(\"locality\")) {\n                city = part.long_name;\n            } else if (part.types.includes(\"administrative_area_level_1\")) {\n                state = part.long_name;\n            } else if (part.types.includes(\"country\")) {\n                country = part.long_name;\n            } else {\n                // do nothing\n            }\n        })\n        return [city, state, country];\n    }\n\n    // get the devices and points\n    const getPoints = async () => {\n        try {\n            const config = new Configuration();\n            const userApi = new UserApi(config);\n            const deviceApi = new DeviceApi(config);\n            try {\n                let token = await userApi.userLogin({username: process.env.REACT_APP_LIGHTBUG_API_USERNAME, password: process.env.REACT_APP_LIGHTBUG_API_PASSWORD});\n                config.accessToken = token.id;\n                config.userId = `${token.userId}`;\n\n            } catch {\n                console.error('Login Failed')\n                alert('Login Fail');\n                return;\n            }\n\n            let items: any[] = [];\n            const locations: any[] = [];\n            let points = await deviceApi.devicePrototypeGetPoints(device.id,\n                JSON.stringify({\n                    where: {\n                        timestamp: {between: [+new Date() - 7 * 24 * 3600 * 1000, new Date()]},\n                        locationType: {neq: 'invalid'}\n                    },\n                    order: 'timestamp DESC', // order by newest points first\n                    limit: numberPulls,\n                }));\n            \n            // Where data gets individually sorted\n            deviceIDEX = device.name;\n\n            for (const point of points) {\n                // ---Bruteforce way, push all data points into a single 1-d array---\n                items.push(format(new Date(point.timestamp), 'Pp'));\n                items.push(point.location?.lat);\n                items.push(point.location?.lng);\n                items.push(point.altitude);\n                items.push(point.batteryVoltage);\n\n                // getting city/state/location\n                let where = await getCityState(point.location);\n\n                // push to array\n                locations.push(\n                    {\n                        name: device.name,\n                        id: device.id,\n                        lat: points[0].location?.lat,\n                        lng: points[0].location?.lng,\n                        time: points[0].timestamp,\n                        city: where[0],\n                        state: where[1],\n                        country: where[2],\n                    }\n                )\n            }\n            setTableItems(items);\n            setPoints(locations);\n\n            let lat_sum = 0;\n            let lng_sum = 0;\n            for (const item of locations) {\n                lat_sum += item.lat; \n                lng_sum += item.lng;\n            }\n            const new_center = {\n                lat: lat_sum / locations.length,\n                lng: lng_sum / locations.length\n            };\n            setCenter(new_center);\n\n        } catch (e) {\n            console.error(\"Failed to get data\", e);\n        }\n    }\n\n    return (\n        <div className=\"card fluid\">\n            <div className=\"section\"> \n                <h1>{device.name}</h1> \n            </div>\n                <div className=\"section double-padded\">\n                    <div className=\"container\">\n                        <div className=\"row\"> \n                        <div className=\"col-sm-5\">\n                                <div className=\"card fluid\"> \n                                    <div className=\"section\"> \n                                        <h4>Device Information</h4>\n                                    </div>\n                                    <div className=\"section\"> \n                                        <p>Battery Life:</p>\n                                    </div>\n                                </div>\n                                <div className=\"card fluid\"> \n                                    <Map devices={points} center={center} displayAll={false} />\n                                </div>\n                            </div>\n                            <div className=\"col-sm-7\">\n                                <DataTable tableItems={tableItems}/>\n                            </div>\n                        </div>\n                    </div>\n            </div>\n        </div> \n    )\n}\n\n// DataTable Component \nconst DataTable: React.FC<Props> = ({tableItems})  => {   \n    //uniqueData needs to be equal to number of unique data points wanted\n    //e.g. if getting date,latitude and longatude then uniqueData = 3;\n    var uniqueData = 5;\n\n    let rows: GridRowsProp = [];\n    let idCount = 0;\n    for (var i = 0; i < (numberPulls * uniqueData); i += uniqueData) { //sets rows for table\n        rows.push(\n            {   id: idCount,\n                col1: tableItems[i],\n                col2: tableItems[i+1], \n                col3: tableItems[i+2],\n                col4: tableItems[i+3],\n                col5: tableItems[i+4]\n            }\n        )\n        idCount++;\n    }\n    let columns = [ //sets columns for table\n        {field: 'col1', headerName: 'Date', width: 300 }, \n        {field: 'col2', headerName: 'Latitude', width: 150},\n        {field: 'col3', headerName: 'Longitude', width: 150,},\n        {field: 'col4', headerName: 'Altitude (Meters)', width: 150, hide: true},\n        {field: 'col5', headerName: 'Voltage (Volts)', width: 150, hide: true}\n        ];\n\n    return (\n        //Putting Data into Table\n        <div style={{ height: 900, width: '100%' }}>\n        <ExcelFile element={<button>Download Data</button>}filename={\"Eagle Data\"}>\n            <ExcelSheet data={rows} name={deviceIDEX}>\n                <ExcelColumn label=\"Date\" value={\"col1\"}/>\n                <ExcelColumn label=\"Latitude\" value={\"col2\"}/>\n                <ExcelColumn label=\"Longitude\" value={\"col3\"}/>\n                <ExcelColumn label=\"Altitude(Meters)\" value={\"col4\"}/>\n                <ExcelColumn label=\"Voltage(Volts\" value={\"col5\"}/>\n            </ExcelSheet>\n        </ExcelFile>\n        <DataGrid rows={rows} columns={columns}/>\n        </div>\n    );\n}\n\nexport default Card"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nastassianguyen/Desktop/proj/EagleTracker/src/Map.tsx\",\n    _s = $RefreshSig$();\n\n/* \nfile: Map.tsx \n    file for the map display of the most recent locations of devices\n    will need to implement google maps API in this component \n*/\nimport React from 'react';\nimport './App.css';\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport { formatRelative } from \"date-fns\";\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"100vh\",\n  align: \"center\",\n  maxWidth: \"100%\",\n  maxHeight: \"100%\"\n};\nconst options = {\n  disableDefaultUI: true,\n  zoomControl: true\n}; // interface for device object\n\nconst Map = ({\n  devices,\n  center,\n  displayAll\n}) => {\n  _s();\n\n  const [selected, setSelected] = React.useState(null); // for rendering infowindow\n\n  const mapRef = React.useRef(); // ref to retain state without constant re-renders\n\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 8,\n      center: center,\n      options: options,\n      onLoad: onMapLoad,\n      children: [devices.map(device => /*#__PURE__*/_jsxDEV(Marker, {\n        title: device.name,\n        visible: true,\n        clickable: true,\n        position: {\n          lat: device.lat,\n          lng: device.lng\n        },\n        onMouseOver: () => {\n          setSelected(device);\n        }\n      }, device.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)), selected && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        onCloseClick: () => {\n          setSelected(null);\n        },\n        position: {\n          lat: selected.lat,\n          lng: selected.lng\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card fluid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section\",\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"Tracker \", selected.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section\",\n            children: displayAll ? [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Last seen: \", formatRelative(new Date(selected.time), new Date())]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 38\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"In \", selected.city, \", \", selected.state, \", \", selected.country]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              className: \"button\",\n              href: `/devices/${selected.id}`,\n              children: \"View more\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 37\n            }, this)] : [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Spotted \", formatRelative(new Date(selected.time), new Date())]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 40\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"In \", selected.city, \", \", selected.state, \", \", selected.country]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 37\n            }, this)]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Map, \"AR1kcDoWG1rss1e2/q9F8u67Pac=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/nastassianguyen/Desktop/proj/EagleTracker/src/Map.tsx"],"names":["React","GoogleMap","LoadScript","Marker","InfoWindow","formatRelative","mapContainerStyle","width","height","align","maxWidth","maxHeight","options","disableDefaultUI","zoomControl","Map","devices","center","displayAll","selected","setSelected","useState","mapRef","useRef","onMapLoad","useCallback","map","current","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","device","name","lat","lng","id","Date","time","city","state","country"],"mappings":"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","sourcesContent":["/* \nfile: Map.tsx \n    file for the map display of the most recent locations of devices\n    will need to implement google maps API in this component \n*/\n\nimport React from 'react';\nimport './App.css';\nimport {\n    GoogleMap,\n    LoadScript,\n    Marker,\n    InfoWindow,\n} from \"@react-google-maps/api\";\nimport {formatRelative} from \"date-fns\";\n\n\nconst mapContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n    align: \"center\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\",\n};\n\nconst options = {\n    disableDefaultUI: true,\n    zoomControl: true,\n}\n\n// interface for device object\nexport interface Device {\n    name: string;\n    id: number;\n    lat: number;\n    lng: number;\n    time: Date;\n    city: string;\n    state: string;\n    country: string;\n}\n\ninterface Center {\n    lat: number;\n    lng: number;\n}\n\ninterface Props {\n    devices: Device[];\n    center: Center;\n    displayAll: boolean;\n}\n\nconst Map: React.FC<Props> = ({devices, center, displayAll})  => {\n\n    const [selected, setSelected] = React.useState<Device | null>(null); // for rendering infowindow\n\n    const mapRef = React.useRef(); // ref to retain state without constant re-renders\n    const onMapLoad = React.useCallback((map) => {\n        mapRef.current = map;\n    }, []);\n\n    return (\n        <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY!}>\n            <GoogleMap \n                mapContainerStyle={mapContainerStyle} \n                zoom = {8} \n                center = {center}\n                options = {options} \n                onLoad={onMapLoad} > \n                {devices.map((device) => (\n                    <Marker \n                        key={device.id}\n                        title={device.name}\n                        visible={true}\n                        clickable={true}\n                        position={{lat:device.lat, lng: device.lng}}\n                        onMouseOver={() => {\n                            setSelected(device);\n                        }}\n                    />\n                ))}\n\n                {selected && (<InfoWindow\n                \n                    onCloseClick={() => {\n                        setSelected(null);\n                        }}\n                    position={{\n                        lat: selected.lat,\n                        lng: selected.lng\n                    }} > \n                    <div className=\"card fluid\">\n                        <div className=\"section\">\n                            <h4>Tracker {selected.name}</h4>    \n                        </div>\n                        <div className=\"section\">\n                            {\n                                displayAll ? \n                                    [<p>Last seen: {formatRelative(new Date(selected.time), new Date())}</p>,\n                                    <p>In {selected.city}, {selected.state}, {selected.country}</p>,\n                                    <a className=\"button\" href={`/devices/${selected.id}`}>View more</a>] \n                                    : [<p>Spotted {formatRelative(new Date(selected.time), new Date())}</p>,\n                                    <p>In {selected.city}, {selected.state}, {selected.country}</p>]\n                            }\n                            \n                        </div>       \n                    </div>\n                </InfoWindow>)}\n            </GoogleMap>\n        </LoadScript>\n    );\n}\nexport default Map;"]},"metadata":{},"sourceType":"module"}